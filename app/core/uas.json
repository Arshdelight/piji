{
    "testrun": {
        "func_name": "testrun",
        "alias": "testrun",
        "type": "testrun",
        "code_template": "self.remove_overlay()\nfor key in self.labels.keys():\n\tlabel = self.labels[key]\n\tlut = label['lut']\n\t# print(lut)\n\tlocation = label['location']\n\tfor loc in location:\n\t\tstart = loc['start']\n\t\tend = loc['end']\n\t\tx_center, y_center = loc['center']\n\t\tradius = loc['radius']\n\t\tmacro = f'''\n\t\t// \u5904\u7406\u5f53\u524d\u7a97\u53e3\n\t\tcurrent_slice = getSliceNumber();\n\t\tgetPixelSize(unit, pixelWidth, pixelHeight);\n\t\tscale = 1 / pixelWidth;\n\t\tfor (s = {{start}}; s <= {{end}}; s++){{{{\n\t\t\tStack.setSlice(s);\n\t\t\trun(\"Colors...\", \"selection={{lut}}\"); \n\t\t\tmakeOval(scale*({{x_center}} - {{radius}}), scale*({{y_center}} - {{radius}}), scale*2*{{radius}}, scale*2*{{radius}});\n\t\t\trun(\"Add Selection...\");\n\t\t\t// \u8bbe\u7f6e\u989c\u8272\n\t\t\tsetColor(\"{{lut}}\");\n\t\t\t// \u5728\u5706\u5f62\u4e0a\u65b9\u7ed8\u5236\u6587\u672c\uff0c\u5e76\u4f5c\u4e3a\u53e0\u52a0\u7684\u4e00\u90e8\u5206\n\t\t\tmakeText(\"s: {{start}}-{{end}}\", scale*({{x_center}} - {{radius}}), scale*({{y_center}} - {{radius}})-10);\n\t\t\tOverlay.addSelection(); // \u5c06\u6587\u672c\u6dfb\u52a0\u5230\u5f53\u524d\u5207\u7247\u7684\u53e0\u52a0\u5c42\n\t\t}}}}\n\t\tStack.setSlice(current_slice);\n\t\t'''\n\t\tself.ij.py.run_macro(macro)"
    },
    "macro_template": {
        "func_name": "macro_template",
        "alias": "Macro Template",
        "type": "Template",
        "code_template": "# \u8f93\u5165\u548c\u8f93\u51fa\npiji_input_from_pu = []\npiji_output_from_macro = []\n\n# \u5b9a\u4e49\u5b8f\u4e3b\u4f53\nmain_macro = '''\n// \u5728\u8fd9\u91cc\u62f7\u8d1dmacro\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''\n\nimport json\nfrom datetime import datetime\nif len(piji_output_from_macro) > 0:\n\t# \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u5e76\u683c\u5f0f\u5316\u4e3a\u5b57\u7b26\u4e32\n\ttimestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')\n\n\tparabus_path = self.root + f'/parabus{{timestamp}}.txt'\n\twith open(parabus_path, 'a') as file:\n\t\t\tpass\n\n# \u6784\u5efa\u5b8f\u5b57\u7b26\u4e32\ninput_macro = ''\n\nargs = {{}}\ntype_mapping = {{\n    str: 'String',\n    int: 'Number',\n    float: 'Number',\n    bool: 'Boolean'\n}}\n\nfor piji_input in piji_input_from_pu:\n    value = getattr(self, piji_input)  # \u5047\u8bbe self \u662f\u5f53\u524d\u7684\u7c7b\u5b9e\u4f8b\n    python_type = type(value)\n    value_type = type_mapping.get(python_type, 'String')  # \u9ed8\u8ba4\u6620\u5c04\u4e3aString\n    args[piji_input] = value\n    input_macro += f'#@ {{value_type}} {{piji_input}}\\n'\n\nif len(piji_output_from_macro) > 0:\n\toutput_macro = f'parabus_path = \"{{parabus_path}}\";'\n\toutput_macro += '\\n' + 'parabus = \"{{\";'\n\tfor piji_output in piji_output_from_macro:\n\t\toutput_macro += '\\n' + f'parabus += \"\\\\\"{{piji_output}}\\\\\": \\\\\"\"+ {{piji_output}} + \"\\\\\",\";'\n\toutput_macro += '\\n' + 'parabus = substring(parabus, 0, lengthOf(parabus) - 1);'\n\toutput_macro += '\\n' + 'parabus += \"}}\";'\n\toutput_macro += '\\nFile.saveString(parabus, parabus_path);'\nelse:\n\toutput_macro = ''\n\n# \u6267\u884cmacro\nij = self.ij \nmacro = input_macro + main_macro + output_macro\n\nij.py.run_macro(macro, args)\n\nif len(piji_output_from_macro) > 0:\n\tdef convert_string(value): \n\t\ttry: \n\t\t\treturn int(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\ttry: \n\t\t\treturn float(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\tif value.lower() in ['true', 'false']: \n\t\t\treturn value.lower() == 'true' \n\t\treturn value\n\twith open(parabus_path, 'r') as file:\n\t\tparabus = json.load(file)\n\tfor piji_output in piji_output_from_macro:\n\t\tvalue = convert_string(parabus[piji_output])\n\t\tsetattr(self, piji_output, value)"
    },
    "imginfoinit": {
        "func_name": "imginfoinit",
        "alias": "\u56fe\u50cf\u4fe1\u606f\u521d\u59cb\u5316",
        "type": "init",
        "code_template": "ij = self.ij\nself.open_selected_image()\nself.getdimensions()\nself.get_imgtype()\n"
    },
    "open_imagej_gui": {
        "func_name": "open_imagej_gui",
        "alias": "\u6253\u5f00imagej GUI",
        "type": "dev",
        "code_template": "ij = self.ij\nij.ui().showUI()"
    },
    "open_imagej_editor": {
        "func_name": "open_imagej_editor",
        "alias": "\u6253\u5f00macro\u7f16\u8f91\u5668",
        "type": "dev",
        "code_template": "ij = self.ij\nIJ = self.ij.IJ\npath = self.root + '\\\\temp.ijm'\n\n# \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u521b\u5efa\u4e00\u4e2a\u7a7a\u6587\u4ef6\nif not os.path.exists(path):\n\twith open(path, 'w') as file:\n\t\tpass # \u6587\u4ef6\u4e0d\u5b58\u5728\u65f6\u521b\u5efa\u7a7a\u6587\u4ef6\npara = f\"open='{{path}}'\"\n\n# \u4f7f\u7528\u5b8f\u547d\u4ee4\u6253\u5f00\u811a\u672c\u7f16\u8f91\u5668\nIJ.run(\"Edit...\", para);"
    },
    "python_template": {
        "func_name": "python_template",
        "alias": "Python Template",
        "type": "Template",
        "code_template": "class python_template:\n\tdef __init__(self, parent):\n\t\tself.pu = parent # \u6ce8\u610fself.pu\u624d\u662fpu\n\t\tfor key, value in parent.__dict__.items():\n\t\t\tsetattr(self, key, value)\n\t\tself.run()\n\t\n\tdef run(self):\n\t\t# \u5728\u8fd9\u91cc\u5199\u4ee3\u7801\n\t\treturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython_template(self)\n'''\nij.__dir__():\n['_legacy', '_WindowManager', '_IJ', 'animation', 'dataset', 'getShortName', 'imageDisplay', 'lut', 'notebook', 'op', 'overlay', 'rendering', 'sampler', 'scifio', 'screenCapture', 'update', 'uploader', 'window', '__module__', '__doc__', 'py', 'legacy', 'IJ', 'ResultsTable', 'RoiManager', 'WindowManager', '_access_legacy_class', '_check_legacy_active', 'app', 'appEvent', 'command', 'console', 'convert', 'display', 'event', 'eventHistory', 'get', 'getApp', 'getInfo', 'getTitle', 'getVersion', 'icon', 'input', 'io', 'launch', 'location', 'log', 'main', 'menu', 'module', 'object', 'options', 'platform', 'plugin', 'prefs', 'recentFile', 'script', 'startup', 'status', 'text', 'thread', 'tool', 'ui', 'widget', 'dispose', 'equals', 'getClass', 'hashCode', 'notify', 'notifyAll', 'toString', 'wait', 'getIdentifier', '__dict__', '__weakref__', '__new__', '__repr__', '__hash__', '__str__', '__getattribute__', '__setattr__', '__delattr__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__del__', '__init__', '__reduce_ex__', '__reduce__', '__getstate__', '__subclasshook__', '__init_subclass__', '__format__', '__sizeof__', '__dir__', '__class__', 'context', 'getContext', 'setContext', 'compareTo', 'getPriority', 'setPriority', 'setInfo', 'getLocation']\n'''"
    },
    "open_selected_image": {
        "func_name": "open_selected_image",
        "alias": "\u6253\u5f00\u9009\u4e2d\u7684\u56fe\u50cf",
        "type": "Image",
        "code_template": "# \u8f93\u5165\u548c\u8f93\u51fa\npiji_input_from_pu = ['image']\npiji_output_from_macro = []\n\n# \u5b9a\u4e49\u5b8f\u4e3b\u4f53\nmain_macro = '''\n// \u5728\u8fd9\u91cc\u62f7\u8d1dmacro\nopen(image);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''\n\nimport json\nfrom datetime import datetime\nif len(piji_output_from_macro) > 0:\n\t# \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u5e76\u683c\u5f0f\u5316\u4e3a\u5b57\u7b26\u4e32\n\ttimestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')\n\n\tparabus_path = self.root + f'/parabus{{timestamp}}.txt'\n\twith open(parabus_path, 'a') as file:\n\t\t\tpass\n\n# \u6784\u5efa\u5b8f\u5b57\u7b26\u4e32\ninput_macro = ''\n\nargs = {{}}\ntype_mapping = {{\n    str: 'String',\n    int: 'Number',\n    float: 'Number',\n    bool: 'Boolean'\n}}\n\nfor piji_input in piji_input_from_pu:\n    value = getattr(self, piji_input)  # \u5047\u8bbe self \u662f\u5f53\u524d\u7684\u7c7b\u5b9e\u4f8b\n    python_type = type(value)\n    value_type = type_mapping.get(python_type, 'String')  # \u9ed8\u8ba4\u6620\u5c04\u4e3aString\n    args[piji_input] = value\n    input_macro += f'#@ {{value_type}} {{piji_input}}\\n'\n\nif len(piji_output_from_macro) > 0:\n\toutput_macro = f'parabus_path = \"{{parabus_path}}\";'\n\toutput_macro += '\\n' + 'parabus = \"{{\";'\n\tfor piji_output in piji_output_from_macro:\n\t\toutput_macro += '\\n' + f'parabus += \"\\\\\"{{piji_output}}\\\\\": \\\\\"\"+ {{piji_output}} + \"\\\\\",\";'\n\toutput_macro += '\\n' + 'parabus = substring(parabus, 0, lengthOf(parabus) - 1);'\n\toutput_macro += '\\n' + 'parabus += \"}}\";'\n\toutput_macro += '\\nFile.saveString(parabus, parabus_path);'\nelse:\n\toutput_macro = ''\n\n# \u6267\u884cmacro\nij = self.ij \nmacro = input_macro + main_macro + output_macro\n\nij.py.run_macro(macro, args)\n\nif len(piji_output_from_macro) > 0:\n\tdef convert_string(value): \n\t\ttry: \n\t\t\treturn int(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\ttry: \n\t\t\treturn float(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\tif value.lower() in ['true', 'false']: \n\t\t\treturn value.lower() == 'true' \n\t\treturn value\n\twith open(parabus_path, 'r') as file:\n\t\tparabus = json.load(file)\n\tfor piji_output in piji_output_from_macro:\n\t\tvalue = convert_string(parabus[piji_output])\n\t\tsetattr(self, piji_output, value)"
    },
    "getdimensions": {
        "func_name": "getdimensions",
        "alias": "\u83b7\u53d6\u7ef4\u5ea6\u548c\u9884\u89c8",
        "type": "Image",
        "code_template": "# \u8f93\u5165\u548c\u8f93\u51fa\npiji_input_from_pu = ['root']\npiji_output_from_macro = ['width', 'height', 'channels', 'slices', 'frames', 'preview', 'initflag']\n\n# \u5b9a\u4e49\u5b8f\u4e3b\u4f53\nmain_macro = '''\n// \u5728\u8fd9\u91cc\u62f7\u8d1dmacro\ngetDimensions(width, height, channels, slices, frames);\n\n// \u6c42\u9996\u5e27\nrun(\"Duplicate...\", \"duplicate frames=1\");\n\n// \u6c42\u6700\u5927\u6295\u5f71\nif(slices>1){{\n\trun(\"Z Project...\", \"projection=[Max Intensity]\");\n}}\n// \u6c42composite\nif(channels>1){{\n\trun(\"Make Composite\");\n\trun(\"RGB Color\");\n}}\n// \u4fdd\u5b58\u5e76\u5bfc\u51fa\npreview = root +\"/preview.jpg\";\nsaveAs(\"Jpeg\", preview);\nrun(\"Close All\");\n\ninitflag = 'True';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''\n\nimport json\nfrom datetime import datetime\nif len(piji_output_from_macro) > 0:\n\t# \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u5e76\u683c\u5f0f\u5316\u4e3a\u5b57\u7b26\u4e32\n\ttimestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')\n\n\tparabus_path = self.root + f'/parabus{{timestamp}}.txt'\n\twith open(parabus_path, 'a') as file:\n\t\t\tpass\n\n# \u6784\u5efa\u5b8f\u5b57\u7b26\u4e32\ninput_macro = ''\n\nargs = {{}}\ntype_mapping = {{\n    str: 'String',\n    int: 'Number',\n    float: 'Number',\n    bool: 'Boolean'\n}}\n\nfor piji_input in piji_input_from_pu:\n    value = getattr(self, piji_input)  # \u5047\u8bbe self \u662f\u5f53\u524d\u7684\u7c7b\u5b9e\u4f8b\n    python_type = type(value)\n    value_type = type_mapping.get(python_type, 'String')  # \u9ed8\u8ba4\u6620\u5c04\u4e3aString\n    args[piji_input] = value\n    input_macro += f'#@ {{value_type}} {{piji_input}}\\n'\n\nif len(piji_output_from_macro) > 0:\n\toutput_macro = f'parabus_path = \"{{parabus_path}}\";'\n\toutput_macro += '\\n' + 'parabus = \"{{\";'\n\tfor piji_output in piji_output_from_macro:\n\t\toutput_macro += '\\n' + f'parabus += \"\\\\\"{{piji_output}}\\\\\": \\\\\"\"+ {{piji_output}} + \"\\\\\",\";'\n\toutput_macro += '\\n' + 'parabus = substring(parabus, 0, lengthOf(parabus) - 1);'\n\toutput_macro += '\\n' + 'parabus += \"}}\";'\n\toutput_macro += '\\nFile.saveString(parabus, parabus_path);'\nelse:\n\toutput_macro = ''\n\n# \u6267\u884cmacro\nij = self.ij \nmacro = input_macro + main_macro + output_macro\n\nij.py.run_macro(macro, args)\n\nif len(piji_output_from_macro) > 0:\n\tdef convert_string(value): \n\t\ttry: \n\t\t\treturn int(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\ttry: \n\t\t\treturn float(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\tif value.lower() in ['true', 'false']: \n\t\t\treturn value.lower() == 'true' \n\t\treturn value\n\twith open(parabus_path, 'r') as file:\n\t\tparabus = json.load(file)\n\tfor piji_output in piji_output_from_macro:\n\t\tvalue = convert_string(parabus[piji_output])\n\t\tsetattr(self, piji_output, value)"
    },
    "get_imgtype": {
        "func_name": "get_imgtype",
        "alias": "\u83b7\u5f97\u56fe\u50cf\u7c7b\u578b",
        "type": "Image",
        "code_template": "ij = self.ij\nIJ = self.ij.IJ\n\nc = 1\ns = 1\nf = 1\n\nif self.channels > 1:\n\tc = 2\nif self.slices > 1:\n\ts = 3\nif self.frames > 1:\n\tf = 5\n\ntype = c*s*f\ndiction = {{\n\t1: 'xy',\n\t2: 'xyc',\n\t3: 'xyz',\n\t5: 'xyt',\n\t6: 'xycz',\n\t10: 'xyct',\n\t15: 'xyzt',\n\t30: 'xyczt'\n}}\ntypename = diction[type]\n\nsetattr(self, 'type', type)\nsetattr(self, 'typename', typename)\n\n# \u5199\u5728\u4ee3\u7801\u4e3b\u4f53\u4e4b\u540e\nimport json\nfrom datetime import datetime\n\noutputparas = ['type', 'typename']\noutput_data = {{}}\n\nfor outputpara in outputparas:\n\t# \u83b7\u53d6\u6bcf\u4e2a outputpara \u7684\u503c\uff08\u5047\u8bbe\u662f\u4e00\u4e2a\u5b57\u5178\u952e\u503c\u5bf9\uff09\n\tvalue = getattr(self, outputpara, None)  # \u4ece self \u5bf9\u8c61\u4e2d\u83b7\u53d6\u5c5e\u6027\u503c\n\tif value is not None:\n\t\t# \u5c06\u952e\u503c\u5bf9\u6dfb\u52a0\u5230 output_data \u5b57\u5178\u4e2d\n\t\toutput_data[outputpara] = value\n\nif output_data:\n\t# \u5c06 output_data \u5e8f\u5217\u5316\u4e3a JSON \u683c\u5f0f\u7684\u5b57\u7b26\u4e32\n\tparabus = json.dumps(output_data)\n\n\ttimestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')\n\tparabus_path = self.root + f'/parabus{{timestamp}}.txt'\n\n\t# \u5199\u5165\u6587\u4ef6\n\twith open(parabus_path, 'w') as file:\n\t\tfile.write(parabus)"
    },
    "pu_clear_history": {
        "func_name": "pu_clear_history",
        "alias": "\u6e05\u7a7ahistory",
        "type": "special",
        "code_template": "# print(self.history)\nself.history.clear()"
    },
    "macro_template2": {
        "func_name": "macro_template2",
        "alias": "Macro Template bak",
        "type": "Template",
        "code_template": "# pu\u53c2\u6570\npiji_input_from_pu =['name']\n# macro\u8f93\u51fa\npiji_output_from_macro = ['macro_output']\n\nmain_macro = '''\n// \u5728\u8fd9\u91cc\u62f7\u8d1dmacro\nmacro_output = name;\n'''\n\n#----------------------------------------------#\ninput_macro = ''\noutput_macro = ''\nargs = {{}}\ntype_mapping = {{\n\tstr: 'String',\n\tint: 'Number',\n\tfloat: 'Number',\n\tbool: 'Boolean'\n\t# \u5176\u4ed6\u7c7b\u578b\u53ef\u4ee5\u6839\u636e\u9700\u8981\u6dfb\u52a0\n}}\nfor piji_input in piji_input_from_pu:\n\tvalue = getattr(self, piji_input)\n\tpython_type = type(value)\n\tvalue_type = type_mapping.get(python_type, 'String') # \u9ed8\u8ba4\u6620\u5c04\u4e3aString\n\targs[piji_input] = value\n\tinput_macro += f'#@ {{value_type}} {{piji_input}}\\n'\nfor piji_output in piji_output_from_macro:\n\toutput_macro += f'#@ output {{piji_output}}\\n'\nmacro = input_macro + main_macro + output_macro\n# \u6267\u884cmacro\u5e76\u83b7\u53d6\u8f93\u51fa\nij = self.ij\n\nprint('--------------------------')\nprint('\u5373\u5c06\u6267\u884c\u4ee5\u4e0bmacro:')\nprint(macro)\nprint('\u53c2\u6570\u4e3a:')\nprint(args)\nprint('--------------------------')\n\nresult = ij.py.run_macro(macro, args)\n# \u5c06\u8f93\u51fa\u5b58\u5165pu\nfor piji_output in piji_output_from_macro:\n\tsetattr(self, piji_output, result.getOutput(f'{{piji_output}}'))"
    },
    "normal_cell_split": {
        "func_name": "normal_cell_split",
        "alias": "\u666e\u901a\u7ec6\u80de\u5206\u5272",
        "type": "Image",
        "code_template": "# \u8f93\u5165\u548c\u8f93\u51fa\npiji_input_from_pu = []\npiji_output_from_macro = []\n\n# \u5b9a\u4e49\u5b8f\u4e3b\u4f53\nmain_macro = '''\n// \u5728\u8fd9\u91cc\u62f7\u8d1dmacro\n\nchannel = {channel:\u9009\u62e9\u5904\u7406\u901a\u9053}\ntitle = \"temp_of_\"+channel\nmin_d = {min_d:\u7ec6\u80de\u6700\u5c0f\u76f4\u5f84}\nmin_r = min_d / 2\nmin_size = 3.14*min_r*min_r\nrun(\"Duplicate...\", \"title=\"+title+\" duplicate channels=\"+channel);\nsetAutoThreshold(\"Li dark no-reset\");\nsetOption(\"BlackBackground\", true);\nrun(\"Convert to Mask\");\nrun(\"Fill Holes\");\nrun(\"Watershed\");\n\nrun(\"Analyze Particles...\", \"size=\"+min_size+\"-Infinity display add\");\n// selectImage(title)\n// close();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''\n\nimport json\nparabus_path = self.root + '/parabus.txt'\nwith open(parabus_path, 'w') as file:\n\t\tpass\n\n# \u6784\u5efa\u5b8f\u5b57\u7b26\u4e32\ninput_macro = ''\n\nargs = {{}}\ntype_mapping = {{\n    str: 'String',\n    int: 'Number',\n    float: 'Number',\n    bool: 'Boolean'\n}}\n\nfor piji_input in piji_input_from_pu:\n    value = getattr(self, piji_input)  # \u5047\u8bbe self \u662f\u5f53\u524d\u7684\u7c7b\u5b9e\u4f8b\n    python_type = type(value)\n    value_type = type_mapping.get(python_type, 'String')  # \u9ed8\u8ba4\u6620\u5c04\u4e3aString\n    args[piji_input] = value\n    input_macro += f'#@ {{value_type}} {{piji_input}}\\n'\n\nif len(piji_output_from_macro) > 0:\n\toutput_macro = f'parabus_path = \"{{parabus_path}}\";'\n\toutput_macro += '\\n' + 'parabus = \"{{\";'\n\tfor piji_output in piji_output_from_macro:\n\t\toutput_macro += '\\n' + f'parabus += \"\\\\\"{{piji_output}}\\\\\": \\\\\"\"+ {{piji_output}} + \"\\\\\",\";'\n\toutput_macro += '\\n' + 'parabus = substring(parabus, 0, lengthOf(parabus) - 1);'\n\toutput_macro += '\\n' + 'parabus += \"}}\";'\n\toutput_macro += '\\nFile.saveString(parabus, parabus_path);'\nelse:\n\toutput_macro = ''\n\n# \u6267\u884cmacro\nij = self.ij \nmacro = input_macro + main_macro + output_macro\n\nij.py.run_macro(macro, args)\n\nif len(piji_output_from_macro) > 0:\n\tdef convert_string(value): \n\t\ttry: \n\t\t\treturn int(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\ttry: \n\t\t\treturn float(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\tif value.lower() in ['true', 'false']: \n\t\t\treturn value.lower() == 'true' \n\t\treturn value\n\twith open(parabus_path, 'r') as file:\n\t\tparabus = json.load(file)\n\tfor piji_output in piji_output_from_macro:\n\t\tvalue = convert_string(parabus[piji_output])\n\t\tsetattr(self, piji_output, value)"
    },
    "program_0826": {
        "func_name": "program_0826",
        "alias": "0826\u9762\u79ef\u8ba1\u7b97\u5668",
        "type": "Program",
        "code_template": "ij = self.ij\nchannel = {channel:\u5904\u7406\u901a\u9053}\nmin_d = {min_d:\u6700\u5c0f\u7ec6\u80de\u76f4\u5f84}\nself.open_selected_image()\nself.normal_cell_split(channel=channel, min_d=min_d)\nself.closs_all()"
    },
    "close_all": {
        "func_name": "close_all",
        "alias": "\u5173\u95ed\u6240\u6709\u56fe\u50cf",
        "type": "Image",
        "code_template": "# \u8f93\u5165\u548c\u8f93\u51fa\npiji_input_from_pu = []\npiji_output_from_macro = []\n\n# \u5b9a\u4e49\u5b8f\u4e3b\u4f53\nmain_macro = '''\n// \u5728\u8fd9\u91cc\u62f7\u8d1dmacro\nrun(\"Close All\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''\n\nimport json\nparabus_path = self.root + '/parabus.txt'\nwith open(parabus_path, 'w') as file:\n\t\tpass\n\n# \u6784\u5efa\u5b8f\u5b57\u7b26\u4e32\ninput_macro = ''\n\nargs = {{}}\ntype_mapping = {{\n    str: 'String',\n    int: 'Number',\n    float: 'Number',\n    bool: 'Boolean'\n}}\n\nfor piji_input in piji_input_from_pu:\n    value = getattr(self, piji_input)  # \u5047\u8bbe self \u662f\u5f53\u524d\u7684\u7c7b\u5b9e\u4f8b\n    python_type = type(value)\n    value_type = type_mapping.get(python_type, 'String')  # \u9ed8\u8ba4\u6620\u5c04\u4e3aString\n    args[piji_input] = value\n    input_macro += f'#@ {{value_type}} {{piji_input}}\\n'\n\nif len(piji_output_from_macro) > 0:\n\toutput_macro = f'parabus_path = \"{{parabus_path}}\";'\n\toutput_macro += '\\n' + 'parabus = \"{{\";'\n\tfor piji_output in piji_output_from_macro:\n\t\toutput_macro += '\\n' + f'parabus += \"\\\\\"{{piji_output}}\\\\\": \\\\\"\"+ {{piji_output}} + \"\\\\\",\";'\n\toutput_macro += '\\n' + 'parabus = substring(parabus, 0, lengthOf(parabus) - 1);'\n\toutput_macro += '\\n' + 'parabus += \"}}\";'\n\toutput_macro += '\\nFile.saveString(parabus, parabus_path);'\nelse:\n\toutput_macro = ''\n\n# \u6267\u884cmacro\nij = self.ij \nmacro = input_macro + main_macro + output_macro\n\nij.py.run_macro(macro, args)\n\nif len(piji_output_from_macro) > 0:\n\tdef convert_string(value): \n\t\ttry: \n\t\t\treturn int(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\ttry: \n\t\t\treturn float(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\tif value.lower() in ['true', 'false']: \n\t\t\treturn value.lower() == 'true' \n\t\treturn value\n\twith open(parabus_path, 'r') as file:\n\t\tparabus = json.load(file)\n\tfor piji_output in piji_output_from_macro:\n\t\tvalue = convert_string(parabus[piji_output])\n\t\tsetattr(self, piji_output, value)"
    },
    "normal_cell_split_nowatershed": {
        "func_name": "normal_cell_split_nowatershed",
        "alias": "\u65e0\u5206\u6c34\u5cad\u7ec6\u80de\u5206\u5272",
        "type": "Image",
        "code_template": "# \u8f93\u5165\u548c\u8f93\u51fa\npiji_input_from_pu = []\npiji_output_from_macro = []\n\n# \u5b9a\u4e49\u5b8f\u4e3b\u4f53\nmain_macro = '''\n// \u5728\u8fd9\u91cc\u62f7\u8d1dmacro\n\nchannel = {channel:\u9009\u62e9\u5904\u7406\u901a\u9053}\ntitle = \"temp_of_\"+channel\nmin_d = {min_d:\u7ec6\u80de\u6700\u5c0f\u76f4\u5f84}\nmin_r = min_d / 2\nmin_size = 3.14*min_r*min_r\nrun(\"Duplicate...\", \"title=\"+title+\" duplicate channels=\"+channel);\nsetAutoThreshold(\"Li dark no-reset\");\nsetOption(\"BlackBackground\", true);\nrun(\"Convert to Mask\");\nrun(\"Fill Holes\");\n\nrun(\"Analyze Particles...\", \"size=\"+min_size+\"-Infinity display add\");\n// selectImage(title)\n// close();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''\n\nimport json\nparabus_path = self.root + '/parabus.txt'\nwith open(parabus_path, 'w') as file:\n\t\tpass\n\n# \u6784\u5efa\u5b8f\u5b57\u7b26\u4e32\ninput_macro = ''\n\nargs = {{}}\ntype_mapping = {{\n    str: 'String',\n    int: 'Number',\n    float: 'Number',\n    bool: 'Boolean'\n}}\n\nfor piji_input in piji_input_from_pu:\n    value = getattr(self, piji_input)  # \u5047\u8bbe self \u662f\u5f53\u524d\u7684\u7c7b\u5b9e\u4f8b\n    python_type = type(value)\n    value_type = type_mapping.get(python_type, 'String')  # \u9ed8\u8ba4\u6620\u5c04\u4e3aString\n    args[piji_input] = value\n    input_macro += f'#@ {{value_type}} {{piji_input}}\\n'\n\nif len(piji_output_from_macro) > 0:\n\toutput_macro = f'parabus_path = \"{{parabus_path}}\";'\n\toutput_macro += '\\n' + 'parabus = \"{{\";'\n\tfor piji_output in piji_output_from_macro:\n\t\toutput_macro += '\\n' + f'parabus += \"\\\\\"{{piji_output}}\\\\\": \\\\\"\"+ {{piji_output}} + \"\\\\\",\";'\n\toutput_macro += '\\n' + 'parabus = substring(parabus, 0, lengthOf(parabus) - 1);'\n\toutput_macro += '\\n' + 'parabus += \"}}\";'\n\toutput_macro += '\\nFile.saveString(parabus, parabus_path);'\nelse:\n\toutput_macro = ''\n\n# \u6267\u884cmacro\nij = self.ij \nmacro = input_macro + main_macro + output_macro\n\nij.py.run_macro(macro, args)\n\nif len(piji_output_from_macro) > 0:\n\tdef convert_string(value): \n\t\ttry: \n\t\t\treturn int(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\ttry: \n\t\t\treturn float(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\tif value.lower() in ['true', 'false']: \n\t\t\treturn value.lower() == 'true' \n\t\treturn value\n\twith open(parabus_path, 'r') as file:\n\t\tparabus = json.load(file)\n\tfor piji_output in piji_output_from_macro:\n\t\tvalue = convert_string(parabus[piji_output])\n\t\tsetattr(self, piji_output, value)"
    },
    "li_threshhold": {
        "func_name": "li_threshhold",
        "alias": "li_\u9608\u503c",
        "type": "Image",
        "code_template": "# \u8f93\u5165\u548c\u8f93\u51fa\npiji_input_from_pu = ['name']\npiji_output_from_macro = []\n\n# \u5b9a\u4e49\u5b8f\u4e3b\u4f53\nmain_macro = '''\n// \u5728\u8fd9\u91cc\u62f7\u8d1dmacro\n\nchannel = {channel:\u9009\u62e9\u5904\u7406\u901a\u9053};\ntitle = \"Binary_\" + name + \"_channel_\" + channel;\nrun(\"Duplicate...\", \"title='\"+title+\"' duplicate channels=\"+channel);\nsetAutoThreshold(\"Li dark no-reset\");\nsetOption(\"BlackBackground\", true);\nrun(\"Convert to Mask\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''\n\nimport json\nparabus_path = self.root + '/parabus.txt'\nwith open(parabus_path, 'w') as file:\n\t\tpass\n\n# \u6784\u5efa\u5b8f\u5b57\u7b26\u4e32\ninput_macro = ''\n\nargs = {{}}\ntype_mapping = {{\n    str: 'String',\n    int: 'Number',\n    float: 'Number',\n    bool: 'Boolean'\n}}\n\nfor piji_input in piji_input_from_pu:\n    value = getattr(self, piji_input)  # \u5047\u8bbe self \u662f\u5f53\u524d\u7684\u7c7b\u5b9e\u4f8b\n    python_type = type(value)\n    value_type = type_mapping.get(python_type, 'String')  # \u9ed8\u8ba4\u6620\u5c04\u4e3aString\n    args[piji_input] = value\n    input_macro += f'#@ {{value_type}} {{piji_input}}\\n'\n\nif len(piji_output_from_macro) > 0:\n\toutput_macro = f'parabus_path = \"{{parabus_path}}\";'\n\toutput_macro += '\\n' + 'parabus = \"{{\";'\n\tfor piji_output in piji_output_from_macro:\n\t\toutput_macro += '\\n' + f'parabus += \"\\\\\"{{piji_output}}\\\\\": \\\\\"\"+ {{piji_output}} + \"\\\\\",\";'\n\toutput_macro += '\\n' + 'parabus = substring(parabus, 0, lengthOf(parabus) - 1);'\n\toutput_macro += '\\n' + 'parabus += \"}}\";'\n\toutput_macro += '\\nFile.saveString(parabus, parabus_path);'\nelse:\n\toutput_macro = ''\n\n# \u6267\u884cmacro\nij = self.ij \nmacro = input_macro + main_macro + output_macro\n\nij.py.run_macro(macro, args)\n\nif len(piji_output_from_macro) > 0:\n\tdef convert_string(value): \n\t\ttry: \n\t\t\treturn int(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\ttry: \n\t\t\treturn float(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\tif value.lower() in ['true', 'false']: \n\t\t\treturn value.lower() == 'true' \n\t\treturn value\n\twith open(parabus_path, 'r') as file:\n\t\tparabus = json.load(file)\n\tfor piji_output in piji_output_from_macro:\n\t\tvalue = convert_string(parabus[piji_output])\n\t\tsetattr(self, piji_output, value)"
    },
    "measure": {
        "func_name": "measure",
        "alias": "\u6d4b\u91cf",
        "type": "Image",
        "code_template": "# \u8f93\u5165\u548c\u8f93\u51fa\npiji_input_from_pu = []\npiji_output_from_macro = []\n\n# \u5b9a\u4e49\u5b8f\u4e3b\u4f53\nmain_macro = '''\n// \u5728\u8fd9\u91cc\u62f7\u8d1dmacro\nrun(\"Measure\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''\n\nimport json\nparabus_path = self.root + '/parabus.txt'\nwith open(parabus_path, 'w') as file:\n\t\tpass\n\n# \u6784\u5efa\u5b8f\u5b57\u7b26\u4e32\ninput_macro = ''\n\nargs = {{}}\ntype_mapping = {{\n    str: 'String',\n    int: 'Number',\n    float: 'Number',\n    bool: 'Boolean'\n}}\n\nfor piji_input in piji_input_from_pu:\n    value = getattr(self, piji_input)  # \u5047\u8bbe self \u662f\u5f53\u524d\u7684\u7c7b\u5b9e\u4f8b\n    python_type = type(value)\n    value_type = type_mapping.get(python_type, 'String')  # \u9ed8\u8ba4\u6620\u5c04\u4e3aString\n    args[piji_input] = value\n    input_macro += f'#@ {{value_type}} {{piji_input}}\\n'\n\nif len(piji_output_from_macro) > 0:\n\toutput_macro = f'parabus_path = \"{{parabus_path}}\";'\n\toutput_macro += '\\n' + 'parabus = \"{{\";'\n\tfor piji_output in piji_output_from_macro:\n\t\toutput_macro += '\\n' + f'parabus += \"\\\\\"{{piji_output}}\\\\\": \\\\\"\"+ {{piji_output}} + \"\\\\\",\";'\n\toutput_macro += '\\n' + 'parabus = substring(parabus, 0, lengthOf(parabus) - 1);'\n\toutput_macro += '\\n' + 'parabus += \"}}\";'\n\toutput_macro += '\\nFile.saveString(parabus, parabus_path);'\nelse:\n\toutput_macro = ''\n\n# \u6267\u884cmacro\nij = self.ij \nmacro = input_macro + main_macro + output_macro\n\nij.py.run_macro(macro, args)\n\nif len(piji_output_from_macro) > 0:\n\tdef convert_string(value): \n\t\ttry: \n\t\t\treturn int(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\ttry: \n\t\t\treturn float(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\tif value.lower() in ['true', 'false']: \n\t\t\treturn value.lower() == 'true' \n\t\treturn value\n\twith open(parabus_path, 'r') as file:\n\t\tparabus = json.load(file)\n\tfor piji_output in piji_output_from_macro:\n\t\tvalue = convert_string(parabus[piji_output])\n\t\tsetattr(self, piji_output, value)"
    },
    "program_0826_2": {
        "func_name": "program_0826_2",
        "alias": "0826\u9762\u79ef\u6bd4\u4f8b",
        "type": "Program",
        "code_template": "ij = self.ij\nchannel = 2\nself.open_selected_image()\nself.li_threshhold(channel=channel)\nself.measure()\nself.close_all()"
    },
    "select_savepath": {
        "func_name": "select_savepath",
        "alias": "\u9009\u62e9\u5b58\u50a8\u8def\u5f84",
        "type": "other",
        "code_template": "class python_template:\n\tdef __init__(self, parent):\n\t\tself.pu = parent # \u6ce8\u610fself.pu\u624d\u662fpu\n\t\tfor key, value in parent.__dict__.items():\n\t\t\tsetattr(self, key, value)\n\t\tself.run()\n\t\n\tdef run(self):\n\t\t# \u5728\u8fd9\u91cc\u5199\u4ee3\u7801\n\t\tfrom PySide6.QtWidgets import QFileDialog\n\t\tprint(self.parent)\n\t\tprint(self.pu)\n\t\tfile_dialog = QFileDialog(self.parent)\n\t\tfile_dialog.setFileMode(QFileDialog.FileMode.Directory)\n\t\tif file_dialog.exec():\n\t\t\tselected_directory = file_dialog.selectedFiles()[0] # \u83b7\u53d6\u9009\u4e2d\u7684\u76ee\u5f55\n\t\t\tsetattr(self.pu, 'savepath', selected_directory)\n\t\t\tprint(f\"\u9009\u4e2d\u7684\u76ee\u5f55\u662f: {{self.pu.savepath}}\")\n\t\telse:\n\t\t\tprint(\"\u6ca1\u6709\u9009\u62e9\u4efb\u4f55\u76ee\u5f55\")\n\t\treturn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npython_template(self)\n'''\nij.__dir__():\n['_legacy', '_WindowManager', '_IJ', 'animation', 'dataset', 'getShortName', 'imageDisplay', 'lut', 'notebook', 'op', 'overlay', 'rendering', 'sampler', 'scifio', 'screenCapture', 'update', 'uploader', 'window', '__module__', '__doc__', 'py', 'legacy', 'IJ', 'ResultsTable', 'RoiManager', 'WindowManager', '_access_legacy_class', '_check_legacy_active', 'app', 'appEvent', 'command', 'console', 'convert', 'display', 'event', 'eventHistory', 'get', 'getApp', 'getInfo', 'getTitle', 'getVersion', 'icon', 'input', 'io', 'launch', 'location', 'log', 'main', 'menu', 'module', 'object', 'options', 'platform', 'plugin', 'prefs', 'recentFile', 'script', 'startup', 'status', 'text', 'thread', 'tool', 'ui', 'widget', 'dispose', 'equals', 'getClass', 'hashCode', 'notify', 'notifyAll', 'toString', 'wait', 'getIdentifier', '__dict__', '__weakref__', '__new__', '__repr__', '__hash__', '__str__', '__getattribute__', '__setattr__', '__delattr__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__del__', '__init__', '__reduce_ex__', '__reduce__', '__getstate__', '__subclasshook__', '__init_subclass__', '__format__', '__sizeof__', '__dir__', '__class__', 'context', 'getContext', 'setContext', 'compareTo', 'getPriority', 'setPriority', 'setInfo', 'getLocation']\n'''"
    },
    "save_image": {
        "func_name": "save_image",
        "alias": "\u5b58\u50a8\u56fe\u50cf",
        "type": "Image",
        "code_template": "try:\n\tgetattr(self, 'savepath')\nexcept:\n\tprint('\u672a\u6307\u5b9a\u5b58\u50a8\u8def\u5f84')\n# \u8f93\u5165\u548c\u8f93\u51fa\npiji_input_from_pu = ['savepath']\npiji_output_from_macro = []\n\n# \u5b9a\u4e49\u5b8f\u4e3b\u4f53\nmain_macro = '''\n// \u5728\u8fd9\u91cc\u62f7\u8d1dmacro\ntitle = getTitle();\nspt = savepath + \"/\"+ title;\nsaveAs(\"Tiff\", spt);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''\n\nimport json\nparabus_path = self.root + '/parabus.txt'\nwith open(parabus_path, 'w') as file:\n\t\tpass\n\n# \u6784\u5efa\u5b8f\u5b57\u7b26\u4e32\ninput_macro = ''\n\nargs = {{}}\ntype_mapping = {{\n    str: 'String',\n    int: 'Number',\n    float: 'Number',\n    bool: 'Boolean'\n}}\n\nfor piji_input in piji_input_from_pu:\n    value = getattr(self, piji_input)  # \u5047\u8bbe self \u662f\u5f53\u524d\u7684\u7c7b\u5b9e\u4f8b\n    python_type = type(value)\n    value_type = type_mapping.get(python_type, 'String')  # \u9ed8\u8ba4\u6620\u5c04\u4e3aString\n    args[piji_input] = value\n    input_macro += f'#@ {{value_type}} {{piji_input}}\\n'\n\nif len(piji_output_from_macro) > 0:\n\toutput_macro = f'parabus_path = \"{{parabus_path}}\";'\n\toutput_macro += '\\n' + 'parabus = \"{{\";'\n\tfor piji_output in piji_output_from_macro:\n\t\toutput_macro += '\\n' + f'parabus += \"\\\\\"{{piji_output}}\\\\\": \\\\\"\"+ {{piji_output}} + \"\\\\\",\";'\n\toutput_macro += '\\n' + 'parabus = substring(parabus, 0, lengthOf(parabus) - 1);'\n\toutput_macro += '\\n' + 'parabus += \"}}\";'\n\toutput_macro += '\\nFile.saveString(parabus, parabus_path);'\nelse:\n\toutput_macro = ''\n\n# \u6267\u884cmacro\nij = self.ij \nmacro = input_macro + main_macro + output_macro\n\nij.py.run_macro(macro, args)\n\nif len(piji_output_from_macro) > 0:\n\tdef convert_string(value): \n\t\ttry: \n\t\t\treturn int(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\ttry: \n\t\t\treturn float(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\tif value.lower() in ['true', 'false']: \n\t\t\treturn value.lower() == 'true' \n\t\treturn value\n\twith open(parabus_path, 'r') as file:\n\t\tparabus = json.load(file)\n\tfor piji_output in piji_output_from_macro:\n\t\tvalue = convert_string(parabus[piji_output])\n\t\tsetattr(self, piji_output, value)"
    },
    "program_0827_binary_save": {
        "func_name": "program_0827_binary_save",
        "alias": "0827\u4e8c\u503c\u5316",
        "type": "Program",
        "code_template": "ij = self.ij\nchannel = 3\n\nsetattr(self, 'savepath', 'D:/ExpData/\u7981\u98df\u548c\u795e\u7ecf\u9000\u884c\u75be\u75c5/\u6025\u6027\u7981\u98df\u548cTau/240725+tau+short-term+adf+egfp_iba1-594_neun-647/zp/egfp_binary')\nself.open_selected_image()\nself.li_threshhold(channel=channel)\nself.save_image()\nself.close_all()"
    },
    "size_to_512_multiple_512": {
        "func_name": "size_to_512_multiple_512",
        "alias": "\u7f29\u653e\u5230512*512",
        "type": "Image",
        "code_template": "# \u8f93\u5165\u548c\u8f93\u51fa\npiji_input_from_pu = []\npiji_output_from_macro = []\n\n# \u5b9a\u4e49\u5b8f\u4e3b\u4f53\nmain_macro = '''\n// \u5728\u8fd9\u91cc\u62f7\u8d1dmacro\nrun(\"Size...\", \"width=512 height=512 depth=4 constrain average interpolation=Bilinear\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''\n\nimport json\nparabus_path = self.root + '/parabus.txt'\nwith open(parabus_path, 'w') as file:\n\t\tpass\n\n# \u6784\u5efa\u5b8f\u5b57\u7b26\u4e32\ninput_macro = ''\n\nargs = {{}}\ntype_mapping = {{\n    str: 'String',\n    int: 'Number',\n    float: 'Number',\n    bool: 'Boolean'\n}}\n\nfor piji_input in piji_input_from_pu:\n    value = getattr(self, piji_input)  # \u5047\u8bbe self \u662f\u5f53\u524d\u7684\u7c7b\u5b9e\u4f8b\n    python_type = type(value)\n    value_type = type_mapping.get(python_type, 'String')  # \u9ed8\u8ba4\u6620\u5c04\u4e3aString\n    args[piji_input] = value\n    input_macro += f'#@ {{value_type}} {{piji_input}}\\n'\n\nif len(piji_output_from_macro) > 0:\n\toutput_macro = f'parabus_path = \"{{parabus_path}}\";'\n\toutput_macro += '\\n' + 'parabus = \"{{\";'\n\tfor piji_output in piji_output_from_macro:\n\t\toutput_macro += '\\n' + f'parabus += \"\\\\\"{{piji_output}}\\\\\": \\\\\"\"+ {{piji_output}} + \"\\\\\",\";'\n\toutput_macro += '\\n' + 'parabus = substring(parabus, 0, lengthOf(parabus) - 1);'\n\toutput_macro += '\\n' + 'parabus += \"}}\";'\n\toutput_macro += '\\nFile.saveString(parabus, parabus_path);'\nelse:\n\toutput_macro = ''\n\n# \u6267\u884cmacro\nij = self.ij \nmacro = input_macro + main_macro + output_macro\n\nij.py.run_macro(macro, args)\n\nif len(piji_output_from_macro) > 0:\n\tdef convert_string(value): \n\t\ttry: \n\t\t\treturn int(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\ttry: \n\t\t\treturn float(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\tif value.lower() in ['true', 'false']: \n\t\t\treturn value.lower() == 'true' \n\t\treturn value\n\twith open(parabus_path, 'r') as file:\n\t\tparabus = json.load(file)\n\tfor piji_output in piji_output_from_macro:\n\t\tvalue = convert_string(parabus[piji_output])\n\t\tsetattr(self, piji_output, value)"
    },
    "program_0827_resize512": {
        "func_name": "program_0827_resize512",
        "alias": "Resize512",
        "type": "Program",
        "code_template": "ij = self.ij\nself.open_selected_image()\nself.size_to_512_multiple_512()\nself.select_savepath()\nself.save_image()\nself.close_all()"
    },
    "cellpose_segment": {
        "func_name": "cellpose_segment",
        "alias": "cellpose\u5206\u5272",
        "type": "Image",
        "code_template": "import numpy as np\nfrom cellpose import models, io, utils # \u7b2c\u4e00\u6b21\u4f1a\u6162\nfrom cellpose.io import imread\n\n# \u8bbe\u7f6e\nchannel = {channel:\u8981\u5206\u5272\u7684\u7ec6\u80de\u5728\u7b2c\u51e0\u4e2a\u901a\u9053}\n# \u8ba1\u7b97\nchannel = channel - 1\n\ntry:\n\tmodel = getattr(self.pus,'model')\nexcept:\n\tprint('\u5bfc\u5165cellpose\u6a21\u578b')\n\tmodel = models.Cellpose(model_type='cyto3')\n\tself.pus.model = model\n\tio.logger_setup()\n\nfile = self.image\nimg_origin = imread(file)\nimg = img_origin[channel]\n\ntry:\n\trois_zip = getattr(self, 'rois_zip')\n\tprint(self.name +\"\u5df2\u6709ROIs: \"+rois_zip)\nexcept:\n\tchannels = [[0,0]]\n\tmask, flow, style, diam = model.eval(img, diameter=None, channels=channels)\n\tio.save_rois(mask, file)\n\tself.rois_zip = self.root + '/' +self.name + '_rois.zip'\n\tprint(self.name +\"\u53d6\u5f97ROIs: \"+self.rois_zip)"
    },
    "roi_intensity": {
        "func_name": "roi_intensity",
        "alias": "roi\u5f3a\u5ea6\u6d4b\u91cf",
        "type": "Image",
        "code_template": "# \u8f93\u5165\u548c\u8f93\u51fa\npiji_input_from_pu = ['image', 'rois_zip', 'image']\npiji_output_from_macro = []\n\n# \u5b9a\u4e49\u5b8f\u4e3b\u4f53\nmain_macro = '''\n// \u5728\u8fd9\u91cc\u62f7\u8d1dmacro\nopen(image);\nStack.setChannel({channel});\n//roiManager(\"Open\", rois_zip);\nroiManager(\"Open\", rois_zip);\nroiManager(\"Show All\");\nroiManager(\"Measure\");\nsaveAs(\"Results\", image + \"@c{channel}.csv\");\nrun(\"Clear Results\");\nroiManager(\"Delete\");\nrun(\"Close All\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''\n\nimport json\nparabus_path = self.root + '/parabus.txt'\nwith open(parabus_path, 'w') as file:\n\t\tpass\n\n# \u6784\u5efa\u5b8f\u5b57\u7b26\u4e32\ninput_macro = ''\n\nargs = {{}}\ntype_mapping = {{\n    str: 'String',\n    int: 'Number',\n    float: 'Number',\n    bool: 'Boolean'\n}}\n\nfor piji_input in piji_input_from_pu:\n    value = getattr(self, piji_input)  # \u5047\u8bbe self \u662f\u5f53\u524d\u7684\u7c7b\u5b9e\u4f8b\n    python_type = type(value)\n    value_type = type_mapping.get(python_type, 'String')  # \u9ed8\u8ba4\u6620\u5c04\u4e3aString\n    args[piji_input] = value\n    input_macro += f'#@ {{value_type}} {{piji_input}}\\n'\n\nif len(piji_output_from_macro) > 0:\n\toutput_macro = f'parabus_path = \"{{parabus_path}}\";'\n\toutput_macro += '\\n' + 'parabus = \"{{\";'\n\tfor piji_output in piji_output_from_macro:\n\t\toutput_macro += '\\n' + f'parabus += \"\\\\\"{{piji_output}}\\\\\": \\\\\"\"+ {{piji_output}} + \"\\\\\",\";'\n\toutput_macro += '\\n' + 'parabus = substring(parabus, 0, lengthOf(parabus) - 1);'\n\toutput_macro += '\\n' + 'parabus += \"}}\";'\n\toutput_macro += '\\nFile.saveString(parabus, parabus_path);'\nelse:\n\toutput_macro = ''\n\n# \u6267\u884cmacro\nij = self.ij \nmacro = input_macro + main_macro + output_macro\n\nij.py.run_macro(macro, args)\n\nif len(piji_output_from_macro) > 0:\n\tdef convert_string(value): \n\t\ttry: \n\t\t\treturn int(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\ttry: \n\t\t\treturn float(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\tif value.lower() in ['true', 'false']: \n\t\t\treturn value.lower() == 'true' \n\t\treturn value\n\twith open(parabus_path, 'r') as file:\n\t\tparabus = json.load(file)\n\tfor piji_output in piji_output_from_macro:\n\t\tvalue = convert_string(parabus[piji_output])\n\t\tsetattr(self, piji_output, value)"
    },
    "p08271643": {
        "func_name": "p08271643",
        "alias": "\u7ec6\u80de\u5206\u5272\u5e76\u8ba1\u7b97\u5f3a\u5ea6",
        "type": "Program",
        "code_template": "ij = self.ij\nchannel = {splitchannel:\u7ec6\u80de\u5206\u5272\u901a\u9053}\nself.cellpose_segment(channel=channel)\nchannels = self.channels\nfor c in range(channels):\n\tself.roi_intensity(channel=c+1)"
    },
    "downsample_stackreg": {
        "func_name": "downsample_stackreg",
        "alias": "\u4e0b\u91c7\u6837\u914d\u51c6",
        "type": "Image",
        "code_template": "import numpy as np\nfrom skimage import io\nfrom tqdm import tqdm\nfrom skimage import img_as_ubyte\nfrom time import time\n\nstart_time = time()\n\nimg_path = self.image\nroot = self.root\n\noriginal_stack = io.imread(self.image)\nslices = original_stack.shape[0]\n\n# \u8bbe\u7f6e\u6b65\u957f\nstep = {Step:\u4e0b\u91c7\u6837\u6b65\u957f}\n\n# \u8ba1\u7b97\u65b0\u5806\u6808\u7684\u5207\u7247\u6570\uff0c\u53bb\u6389\u5c3e\u90e8\u4e0d\u8db3\u6b65\u6570\u7684\u5e27\nnew_slices = slices // step\n\n# \u521d\u59cb\u5316\u65b0\u5806\u6808\nprojected_stack = []\n# \u8fdb\u884c\u9010\u6b65\u5e73\u5747\u6295\u5f71\uff0c\u5e76\u663e\u793a\u8fdb\u5ea6\u6761\nfor i in tqdm(range(new_slices), desc=\"Calculating mean of steps of slices\"):\n    start_slice = i * step\n    end_slice = min((i + 1) * step, slices)\n    \n    # \u8ba1\u7b97\u5f53\u524d\u8303\u56f4\u5185\u7684\u5e73\u5747\u6295\u5f71\n    avg_projection = np.mean(original_stack[start_slice:end_slice], axis=0)\n    \n    \n    # \u5c06\u5e73\u5747\u6295\u5f71\u7ed3\u679c\u4fdd\u5b58\u5728\u65b0\u5806\u6808\u4e2d\n    projected_stack.append(avg_projection)\n\n# \u5c06\u7ed3\u679c\u8f6c\u6362\u4e3anumpy\u6570\u7ec4\u5e76\u4fdd\u5b58\nprojected_stack = np.stack(projected_stack, axis=0).astype(np.uint8)\ndownsampleavg = root + '/downsampleavg.tif' \nio.imsave(downsampleavg, projected_stack)\nself.downsampleavg = downsampleavg\n\nfrom pystackreg import StackReg\nreg_stack = []\nsr = StackReg(StackReg.TRANSLATION)\n\nref_length = min(10,new_slices+1)\nref = np.mean(projected_stack[i:i + ref_length], axis=0).astype(np.uint8)\n\nfor i in tqdm(range(projected_stack.shape[0]), desc=\"Regulating slices\"):\n    # Load \"moved\" image\n    mov = projected_stack[i]\n    # Translational transformation\n    out_tra = sr.register_transform(ref, mov)\n    reg_stack.append(out_tra)\n\nregged_stack = np.stack(reg_stack)\n\n# regged_stack[regged_stack < 0] = 0\n# regged_stack = regged_stack.astype(np.uint8)\n\nregged_stack = (regged_stack - regged_stack.min()) / (regged_stack.max() - regged_stack.min())\nregged_stack = (regged_stack * 255).astype(np.uint8)\n\n\ndownsampleavg_reg = root + '/downsampleavg_reg.tif'\nio.imsave(downsampleavg_reg, regged_stack)\nself.downsampleavg_reg = downsampleavg_reg\n\nend_time = time()\n\nexecution_time = end_time - start_time # \u8ba1\u7b97\u6267\u884c\u65f6\u95f4\nprint(self.name,'\u5df2\u5904\u7406\u5b8c\u6210')\nprint(f'\u4e0b\u91c7\u6837\u914d\u51c6\u6267\u884c\u65f6\u95f4: {{execution_time}} \u79d2')"
    },
    "reg_cell_segment": {
        "func_name": "reg_cell_segment",
        "alias": "\u914d\u51c6\u7ec6\u80de\u5206\u5272",
        "type": "Program",
        "code_template": "# \u8f93\u5165\u548c\u8f93\u51fa\npiji_input_from_pu = ['downsampleavg_reg', 'root']\npiji_output_from_macro = ['STD_downsampleavg_reg']\n\n# \u5b9a\u4e49\u5b8f\u4e3b\u4f53\nmain_macro = '''\nopen(downsampleavg_reg)\nrun(\"Z Project...\", \"projection=[Standard Deviation]\");\nrun(\"8-bit\");\nSTD_downsampleavg_reg = root + \"/STD_downsampleavg_reg.tif\"\nsaveAs(\"Tiff\", STD_downsampleavg_reg);\nrun(\"Close All\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''\n\nimport json\nparabus_path = self.root + '/parabus.txt'\nwith open(parabus_path, 'w') as file:\n\t\tpass\n\n# \u6784\u5efa\u5b8f\u5b57\u7b26\u4e32\ninput_macro = ''\n\nargs = {{}}\ntype_mapping = {{\n    str: 'String',\n    int: 'Number',\n    float: 'Number',\n    bool: 'Boolean'\n}}\n\nfor piji_input in piji_input_from_pu:\n    value = getattr(self, piji_input)  # \u5047\u8bbe self \u662f\u5f53\u524d\u7684\u7c7b\u5b9e\u4f8b\n    python_type = type(value)\n    value_type = type_mapping.get(python_type, 'String')  # \u9ed8\u8ba4\u6620\u5c04\u4e3aString\n    args[piji_input] = value\n    input_macro += f'#@ {{value_type}} {{piji_input}}\\n'\n\nif len(piji_output_from_macro) > 0:\n\toutput_macro = f'parabus_path = \"{{parabus_path}}\";'\n\toutput_macro += '\\n' + 'parabus = \"{{\";'\n\tfor piji_output in piji_output_from_macro:\n\t\toutput_macro += '\\n' + f'parabus += \"\\\\\"{{piji_output}}\\\\\": \\\\\"\"+ {{piji_output}} + \"\\\\\",\";'\n\toutput_macro += '\\n' + 'parabus = substring(parabus, 0, lengthOf(parabus) - 1);'\n\toutput_macro += '\\n' + 'parabus += \"}}\";'\n\toutput_macro += '\\nFile.saveString(parabus, parabus_path);'\nelse:\n\toutput_macro = ''\n\n# \u6267\u884cmacro\nij = self.ij \nmacro = input_macro + main_macro + output_macro\n\nij.py.run_macro(macro, args)\n\nif len(piji_output_from_macro) > 0:\n\tdef convert_string(value): \n\t\ttry: \n\t\t\treturn int(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\ttry: \n\t\t\treturn float(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\tif value.lower() in ['true', 'false']: \n\t\t\treturn value.lower() == 'true' \n\t\treturn value\n\twith open(parabus_path, 'r') as file:\n\t\tparabus = json.load(file)\n\tfor piji_output in piji_output_from_macro:\n\t\tvalue = convert_string(parabus[piji_output])\n\t\tsetattr(self, piji_output, value)\nself.cellpose_segment_attr(channel = 1,Attribute='STD_downsampleavg_reg')"
    },
    "cellpose_segment_attr": {
        "func_name": "cellpose_segment_attr",
        "alias": "cellpose\u5206\u5272_attr",
        "type": "Image",
        "code_template": "import numpy as np\nfrom cellpose import models, io, utils # \u7b2c\u4e00\u6b21\u4f1a\u6162\nfrom cellpose.io import imread\n\n# \u8bbe\u7f6e\nchannel = {channel:\u8981\u5206\u5272\u7684\u7ec6\u80de\u5728\u7b2c\u51e0\u4e2a\u901a\u9053}\n# \u8ba1\u7b97\nchannel = channel - 1\n\ntry:\n\tmodel = getattr(self.pus,'model')\nexcept:\n\tprint('\u5bfc\u5165cellpose\u6a21\u578b')\n\tmodel = models.Cellpose(model_type='cyto3')\n\tself.pus.model = model\n\tio.logger_setup()\nattr = '{Attribute:pu\u4e2d\u7684\u56fe\u50cf}'\nfile = getattr(self, attr)\nimg_origin = imread(file)\nif img_origin.ndim > 2:\n\timg = img_origin[channel]\nelse:\n\timg = img_origin\nchannels = [[0,0]]\nmask, flow, style, diam = model.eval(img, diameter=None, channels=channels)\nio.save_rois(mask, file)\nsetattr(self, attr+'_rois_zip', self.root + '/' +attr + '_rois.zip')\nprint(self.name +\"\u53d6\u5f97ROIs: \"+getattr(self, attr+'_rois_zip'))"
    },
    "dsr_roi_tsm": {
        "func_name": "dsr_roi_tsm",
        "alias": "\u4e0b\u91c7\u6837\u914d\u51c6roi\u65f6\u95f4\u5e8f\u5217",
        "type": "Program",
        "code_template": "# \u8f93\u5165\u548c\u8f93\u51fa\npiji_input_from_pu = ['downsampleavg_reg', 'STD_downsampleavg_reg_rois_zip']\npiji_output_from_macro = []\n\n# \u5b9a\u4e49\u5b8f\u4e3b\u4f53\nmain_macro = '''\n\n// \u5728\u8fd9\u91cc\u62f7\u8d1dmacro\nopen(downsampleavg_reg);\nopen(STD_downsampleavg_reg_rois_zip);\nrun(\"Time Series Analyzer V2 0\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''\n\nimport json\nparabus_path = self.root + '/parabus.txt'\nwith open(parabus_path, 'w') as file:\n\t\tpass\n\n# \u6784\u5efa\u5b8f\u5b57\u7b26\u4e32\ninput_macro = ''\n\nargs = {{}}\ntype_mapping = {{\n    str: 'String',\n    int: 'Number',\n    float: 'Number',\n    bool: 'Boolean'\n}}\n\nfor piji_input in piji_input_from_pu:\n    value = getattr(self, piji_input)  # \u5047\u8bbe self \u662f\u5f53\u524d\u7684\u7c7b\u5b9e\u4f8b\n    python_type = type(value)\n    value_type = type_mapping.get(python_type, 'String')  # \u9ed8\u8ba4\u6620\u5c04\u4e3aString\n    args[piji_input] = value\n    input_macro += f'#@ {{value_type}} {{piji_input}}\\n'\n\nif len(piji_output_from_macro) > 0:\n\toutput_macro = f'parabus_path = \"{{parabus_path}}\";'\n\toutput_macro += '\\n' + 'parabus = \"{{\";'\n\tfor piji_output in piji_output_from_macro:\n\t\toutput_macro += '\\n' + f'parabus += \"\\\\\"{{piji_output}}\\\\\": \\\\\"\"+ {{piji_output}} + \"\\\\\",\";'\n\toutput_macro += '\\n' + 'parabus = substring(parabus, 0, lengthOf(parabus) - 1);'\n\toutput_macro += '\\n' + 'parabus += \"}}\";'\n\toutput_macro += '\\nFile.saveString(parabus, parabus_path);'\nelse:\n\toutput_macro = ''\n\n# \u6267\u884cmacro\nij = self.ij \nmacro = input_macro + main_macro + output_macro\n\nij.py.run_macro(macro, args)\n\nif len(piji_output_from_macro) > 0:\n\tdef convert_string(value): \n\t\ttry: \n\t\t\treturn int(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\ttry: \n\t\t\treturn float(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\tif value.lower() in ['true', 'false']: \n\t\t\treturn value.lower() == 'true' \n\t\treturn value\n\twith open(parabus_path, 'r') as file:\n\t\tparabus = json.load(file)\n\tfor piji_output in piji_output_from_macro:\n\t\tvalue = convert_string(parabus[piji_output])\n\t\tsetattr(self, piji_output, value)"
    },
    "dsr_program": {
        "func_name": "dsr_program",
        "alias": "\u4e0b\u91c7\u6837\u914d\u51c6\u65f6\u95f4\u5e8f\u5217Program",
        "type": "Program",
        "code_template": "ij = self.ij\nself.downsample_stackreg()\nself.reg_cell_segment()\nself.dsr_roi_tsm()"
    },
    "reg_d2d": {
        "func_name": "reg_d2d",
        "alias": "\u9694\u65e5\u540c\u5c42\u914d\u51c6",
        "type": "Image",
        "code_template": "from skimage import io\nfrom tqdm import tqdm\nimport numpy as np\nfrom scipy.ndimage import affine_transform\n# \u9700\u8981\u5148\u53d6\u5f97before_reg\u548cafter_reg\n\n\n# \u53c2\u6570\u83b7\u53d6\nscale_factor = {scale_factor:\u7f29\u653e\u7cfb\u6570(\u63a8\u8350\u4e3a2)}\nsplitchannel = {channel:\u9009\u62e9\u5206\u6790\u7684\u901a\u9053(begin from 1)}\n\n# \u83b7\u53d6ij\u5bf9\u8c61\nij = self.ij\n\n\n# \u53d6\u5f97nextpu\npus = self.pus\nindex = None\nfor i , pu in enumerate(pus.list):\n\tif pu.name == self.name:\n\t\tindex = i\n\t\tbreak\nif index is not None:\n\tnextpu = pus.list[index+1]\nelse:\n\tValueError('\u7f3a\u5931\u4e0b\u4e00\u4e2apu\u5bf9\u8c61')\n\n\n# \u83b7\u5f97before_reg\u548cafter_reg\nbefore_reg = io.imread(self.before_reg)\nafter_reg = io.imread(nextpu.after_reg)\nslices = min(before_reg.shape[0], after_reg.shape[0])\nif before_reg.shape[0] != after_reg.shape[0]:\n\tprint('\u8b66\u544a\uff0c\u524d\u540e\u6bd4\u8f83\u7684\u56fe\u7247\u5c42\u6570\u4e0d\u540c\uff0c\u5c06\u53d6\u8f83\u5c0f\u503c')\n\n\n# \u540c\u5c42\u914d\u51c6\nfrom pystackreg import StackReg\nsr = StackReg(StackReg.RIGID_BODY)\n\n\ntmats = []\nfor slice in tqdm(range(slices), desc='\u540c\u5c42\u914d\u51c6--\u77e9\u9635\u83b7\u53d6'):\n\tref = before_reg[slice]\n\tmov = after_reg[slice]\n\t# tmat = sr.register(ref, mov) # \u6b64\u6761\u7684\u77e9\u9635\u4e0d\u5bf9\n\ttmat = sr.register(mov, ref)\n\ttmat[0, 2] *= scale_factor # \u7f29\u653ex\u5e73\u79fb\n\ttmat[1, 2] *= scale_factor # \u7f29\u653ey\u5e73\u79fb\n\ttmats.append(tmat)\n\nafter = io.imread(nextpu.image)[nextpu.startindex:nextpu.startindex+slices]\n\n# \u5bf9\u56fe\u50cf\u8fdb\u884c\u4eff\u5c04\u53d8\u6362\nafter_regged_stack = []\nfor idx, tmat in enumerate(tqdm(tmats, desc='\u540c\u5c42\u914d\u51c6--\u4eff\u5c04\u53d8\u6362')):\n\tmatrix_2x2 = tmat[:2, :2]  # \u83b7\u53d6\u65cb\u8f6c/\u7f29\u653e\u90e8\u5206\n\toffset = tmat[:2, 2]       # \u83b7\u53d6\u5e73\u79fb\u90e8\u5206 (tx, ty)\n\tif after.ndim == 4:\n\t\ttransformed_channels = []\n\t\tfor channel in range(after.shape[1]):\n\t\t\ttransformed_channel = affine_transform(after[idx, channel], matrix_2x2, offset=offset)\n\t\t\ttransformed_channels.append(transformed_channel)\n\t\tafter_regged_stack.append(np.stack(transformed_channels))\n\telif after.ndim == 3:\n\t\tafter_regged_stack.append(affine_transform(after[idx], matrix_2x2, offset=offset))\n\telse:\n\t\traise ValueError(f'\u4e0d\u652f\u6301\u7684\u56fe\u50cf\u7ef4\u5ea6')\nafter_regged = np.stack(after_regged_stack)\n\npath_after_regged = nextpu.root + '/after_regged.tif'\nio.imsave(path_after_regged, after_regged)\nnextpu.after_regged = path_after_regged\n\nbefore_original = io.imread(self.image)[self.startindex:self.startindex+slices]\npath_before_original = self.root + '/before_original.tif'\nio.imsave(path_before_original, before_original)\nself.before_original = path_before_original\n\nmacro =f'''\nopen(\"{{path_before_original}}\");\nrename(\"composite-before\");\nrun(\"Stack to Hyperstack...\", \"order=xyczt(default) channels={{after.shape[1]}} slices={{slices}} frames=1 display=Color\");\nrun(\"Duplicate...\", \"title=before duplicate channels={{splitchannel}}\");\n\nopen(\"{{nextpu.after_regged}}\");\nrename(\"composite-after\");\nrun(\"Stack to Hyperstack...\", \"order=xyczt(default) channels={{after.shape[1]}} slices={{slices}} frames=1 display=Color\");\nrun(\"Duplicate...\", \"title=after duplicate channels={{splitchannel}}\");\n\nrun(\"Synchronize Windows\");\n'''\nij.py.run_macro(macro)\nprint('\u540c\u5c42\u914d\u51c6\u5b8c\u6bd5')\n\n\t"
    },
    "allign_d2d": {
        "func_name": "allign_d2d",
        "alias": "\u9694\u65e5\u5bf9\u9f50",
        "type": "Program",
        "code_template": "# \u5bfc\u5165\u5305\nimport matplotlib.pyplot as plt\nfrom skimage import io\nfrom tqdm import tqdm\n\n\n# \u83b7\u53d6ij\u5bf9\u8c61\nij = self.ij\n\n# \u53d6\u5f97nextpu\npus = self.pus\nindex = None\nfor i , pu in enumerate(pus.list):\n\tif pu.name == self.name:\n\t\tindex = i\n\t\tbreak\nif index is not None:\n\tnextpu = pus.list[index+1]\nelse:\n\traise ValueError('\u7f3a\u5931\u4e0b\u4e00\u4e2apu\u5bf9\u8c61')\n\n\n# \u53c2\u6570\u83b7\u53d6\nchannel = {channel:\u9009\u62e9\u914d\u51c6\u7684\u53c2\u8003\u901a\u9053(begin from 1)} - 1\nlength = {length:\u622a\u53d6\u5c42\u6570}\nscale_factor = {scale_factor:\u7f29\u653e\u7cfb\u6570(\u63a8\u8350\u4e3a2)}\n\n\n# \u8bfb\u53d6\u56fe\u7247\nbefore = io.imread(self.image)\nafter = io.imread(nextpu.image)\n\n\n# \u59d1\u4e14\u5148\u7f29\u653e\u539f\u56fe\n_, _, bx, by= before.shape\n_, _, ax, ay = after.shape\nx = min(ax, bx) // scale_factor\ny = min(ay, by) // scale_factor\ndef resize_image(image, x, y):\n\timport numpy as np\n\timport cv2\n\ttarget_size = (x, y)\n\tndim = image.ndim\n\tif ndim == 2:\n\t\t# 2D image (x, y)\n\t\treturn cv2.resize(image, target_size, interpolation=cv2.INTER_AREA)\n\telif ndim == 3:\n\t\t# 3D image (slices, x, y)\n\t\treturn np.array([cv2.resize(slice, target_size, interpolation=cv2.INTER_AREA) for slice in image])\n\telif ndim == 4:\n\t\t# 4D image (slices, channels, x, y)\n\t\treturn np.array([[cv2.resize(channel, target_size, interpolation=cv2.INTER_AREA) for channel in slice] for slice in image])\n\t# \u6682\u4e0d\u8003\u86515D\n\t# elif ndim == 5:\n\t\t# 5D image (time, slices, channels, x, y)\n\t\t# return np.array([[[cv2.resize(channel, target_size, interpolation=cv2.INTER_AREA) for channel in slice] for slice in time_point] for time_point in image])\n\telse: raise ValueError(f\"Unsupported image dimension: {{ndim}}\")\nprint('\u7f29\u653e\u56fe\u50cf\u5230(',x,',',y,')\uff0c\u8bf7\u7b49\u5f85\u2026\u2026')\nbefore = resize_image(before, x, y)\nafter = resize_image(after,x, y)\nprint('\u7f29\u653e\u5b8c\u6210')\n\n\n# \u8bfb\u53d6\u56fe\u7247\u4e2d\u8981\u5904\u7406\u7684\u5e27\nbefore_align = before[:,channel,:,:]\nafter_align = after[:,channel,:,:]\n\n\n# \u8ba1\u7b97\u622a\u53d6\u53c2\u6570\nslices = min(before_align.shape[0], after_align.shape[0]) # \u9632\u6b62\u5c42\u6570\u4e0d\u4e00\nprint('\u5c42\u6570\uff1a',slices)\nstart_ref = (slices - length) // 2\ntry:\n\tstart_ref_index = getattr(self, 'startindex')\n\tprint(f'\u53c2\u8003\u56fe\u5df2\u6709\u8bbe\u7f6e\u7684\u8d77\u59cb\u5e27\u7d22\u5f15{{start_ref_index}}')\nexcept:\n\tstart_ref_index = start_ref - 1\n\tprint(f'\u53c2\u8003\u56fe\u8d77\u59cb\u5e27\u7d22\u5f15\u5c06\u8bbe\u4e3a{{start_ref_index}}')\nuser_defined_index = {start_ref_index:\u53c2\u8003\u56fe\u8d77\u59cb\u5e27\u7d22\u5f15(\u9ed8\u8ba4\u4e3a0)}\nif user_defined_index != 0:\n\tstart_ref_index = user_defined_index\n\tprint('\u53c2\u8003\u56fe\u8d77\u59cb\u5e27\u7d22\u5f15\u6839\u636e\u7528\u6237\u8bbe\u5b9a\u4e3a', start_ref_index)\nprint('\u53c2\u8003\u56fe\u8d77\u59cb\u5e27\u4e3a', start_ref_index+1)\nself.startindex = start_ref_index\n\n\n# \u81ea\u52a8\u5bf9\u9f50\u8d77\u59cb\u5e27\ndef find_best_match(reference_stack, moving_stack, ref_index, AVG_length=2, irange=None, length=length):\n\timport cv2\n\timport numpy as np\n\tfrom tqdm import tqdm\n\t# \u63d0\u53d6\u53c2\u8003\u5e27\u4ee5\u53ca\u5b83\u7684\u524d\u540e AVG_length \u5e27\n\tstart_ref = ref_index + 1\n\treference_frames = reference_stack[ref_index - AVG_length: ref_index + 1 + AVG_length, :, :]  # \u5171 2 * AVG_length + 1 \u5e27\n\tbest_match_frame = None\n\tbest_score = -1\n\tbest_index = -1\n\n\t# \u5faa\u73af\u904d\u5386 moving_stack \u7684\u6bcf\u4e00\u5e27\uff0c\u786e\u4fdd\u8fb9\u7f18\u5e27\u4e0d\u4f1a\u8d85\u51fa\u8303\u56f4\n\tif irange is None:\n\t\tirange = range(AVG_length, 2*((moving_stack.shape[0] - length)//2)-AVG_length)\n\tfor i in tqdm(irange,desc='\u81ea\u52a8\u5bf9\u9f50\u8d77\u59cb\u5e27'):\n\t\t# \u53d6\u51fa\u5f53\u524d\u5e27\u53ca\u5176\u524d\u540e AVG_length \u5e27\n\t\tmoving_frames = moving_stack[i - AVG_length:i + AVG_length + 1, :, :]  # \u5171 2 * AVG_length + 1 \u5e27\n\n\t\t# \u5bf9\u9010\u5e27\u8fdb\u884c\u5339\u914d\n\t\tmatch_scores = []\n\t\tfor ref_frame, mov_frame in zip(reference_frames, moving_frames):\n\t\t\tres = cv2.matchTemplate(mov_frame, ref_frame, cv2.TM_CCOEFF_NORMED)\n\t\t\tmin_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)\n\t\t\tmatch_scores.append(max_val)\n\t\t\t\n\t\t\tmean_val = np.mean(match_scores)\n\t\t\tif mean_val > best_score:\n\t\t\t\tbest_score = mean_val\n\t\t\t\tbest_index = i\n\tif best_index != -1:\n\t\tprint('\u5bf9\u9f50\u7ed3\u679c:',best_score, f'\u7b2c{{best_index+1}}\u5e27')\n\t\treturn best_index\n\n\nAVG_length = 2\nstart_mov_index = find_best_match(before_align, after_align, start_ref_index, AVG_length = AVG_length, length=length)\nnextpu.startindex = start_mov_index\n\n\n# \u622a\u53d6\u56fe\u50cf\nbefore_reg = before_align[start_ref_index : start_ref_index + length]\nafter_reg = after_align[start_mov_index : start_mov_index + length]\n\n\n# \u4fdd\u5b58\u56fe\u50cf\npath_before_reg = self.root+'/before_reg.tif'\nio.imsave(path_before_reg, before_reg)\nself.before_reg = path_before_reg\n\npath_after_reg =  nextpu.root+'/after_reg.tif'\nio.imsave(path_after_reg, after_reg)\nnextpu.after_reg = path_after_reg\n\n\n# \u5728pyimagej\u91cc\u9884\u89c8\u56fe\u50cf\n# ij.ui().showUI()\n# macro = f'''\n# open(\"{{self.before_reg}}\");\n# open(\"{{nextpu.after_reg}}\");\n# run(\"Synchronize Windows\");\n# '''\n# ij.py.run_macro(macro)\n\n# \u914d\u51c6\u5e76\u663e\u793a\u7ed3\u679c\nself.reg_d2d(channel = channel+1, scale_factor=scale_factor)\n\n# \u4eba\u5de5\u4fee\u6b63\noffset = int(input(f'\u662f\u5426\u9700\u8981\u4eba\u5de5\u4fee\u6b63\u504f\u79fb\uff0c\u5bf9\u4e8eafter\u7684\u56fe\u50cf\uff0c\u8d1f\u4e3a\u5411\u524d\uff0c\u6b63\u4e3a\u5411\u540e\uff08\u8303\u56f4\uff1a{{-start_mov_index}}~{{slices-length-start_mov_index}}\uff09\uff1a'))\nif offset == 0:\n\tprint('\u5f88\u597d\uff0c\u65e0\u9700\u4fee\u6b63~')\nelif offset not in range(-start_mov_index,slices-length-start_mov_index+1):\n\tprint('\u8d85\u51fa\u4fee\u6b63\u8303\u56f4\uff0c\u4fee\u6b63\u53d6\u6d88')\nelse:\n\tnextpu.startindex += offset\n\tafter_reg = after_align[start_mov_index + offset : start_mov_index + length + offset]\n\tio.imsave(path_after_reg, after_reg)\n\tmacro = f'''\n\tselectImage(\"before\");\n\tclose();\n\tselectImage(\"after\");\n\tclose();\n\tselectImage(\"composite-before\");\n\tclose();\n\tselectImage(\"composite-after\");\n\tclose();\n\t'''\n\tij.py.run_macro(macro)\n\tself.reg_d2d(channel = channel+1, scale_factor=scale_factor)\n\n# \u9010\u5e27\u914d\u51c6\n# \u9996\u5148\u914d\u51c6before\uff0c\u8bb0\u5f55\u53d8\u6362\u77e9\u9635\uff0c\u7136\u540e\u5bf9\u5176\u4f59\u4e09\u4e2a\u90fd\u5904\u7406\n\nmacro =f'''\n// \u5f39\u51fa\u9009\u62e9\u5668\uff0c\u83b7\u53d6\u76ee\u5f55\ndir = \"{{nextpu.root}}/\";\n\nselectImage(\"before\");\nsaveAs(\"Tiff\", dir+\"before\");\nclose();\n\nselectImage(\"composite-before\");\nsaveAs(\"Tiff\", dir+\"composite-before\");\nclose();\n\nselectImage(\"after\");\nsaveAs(\"Tiff\", dir+\"after\");\nclose();\n\nselectImage(\"composite-after\");\nsaveAs(\"Tiff\", dir+\"composite-after\");\nclose();\n\n'''\nij.py.run_macro(macro)\nprint('\u5bf9\u9f50\u548c\u914d\u51c6\u5b8c\u6210')"
    },
    "temp240908": {
        "func_name": "temp240908",
        "alias": "\u793a\u4f8b240908",
        "type": "Program",
        "code_template": "ij = self.ij\nself.allign_d2d(channel=2, length=100, scale_factor=2, start_ref_index=0)\n\n# \u6211\u8981\u914d\u51c6\u7684\u901a\u9053\u662f\u7b2c\u4e8c\u4e2a\n# \u6211\u7684slices\u5171150\u5c42\uff0c\u6545\u6211\u7edf\u8ba1\u5176\u4e2d\u7684100\u5c42\n# \u6211\u7684\u56fe\u50cf\u5927\u5c0f\u662f1024*1024\uff0c\u6211\u7f29\u653e\u5230512*512\u6765\u8fd0\u7b97\uff0c\u53ef\u4ee5\u52a0\u901f\n# \u6bcf\u5f20\u56fe\u7247\u622a\u53d6\u7684\u8d77\u59cb\u5c42\u4e0d\u5b9a\u4e49"
    },
    "reg_d2d_super": {
        "func_name": "reg_d2d_super",
        "alias": "\u9694\u65e5\u540c\u5c42\u914d\u51c6s",
        "type": "Image",
        "code_template": "from skimage import io\nfrom tqdm import tqdm\nimport numpy as np\n# \u9700\u8981\u5148\u53d6\u5f97before_reg\u548cafter_reg\n\n\n# \u53c2\u6570\u83b7\u53d6\nscale_factor = {scale_factor:\u7f29\u653e\u7cfb\u6570(\u63a8\u8350\u4e3a2)}\nsplitchannel = {channel:\u9009\u62e9\u5206\u6790\u7684\u901a\u9053(begin from 1)}\n\n# \u83b7\u53d6ij\u5bf9\u8c61\nij = self.ij\n\n\n# \u53d6\u5f97nextpu\npus = self.pus\nindex = None\nfor i , pu in enumerate(pus.list):\n\tif pu.name == self.name:\n\t\tindex = i\n\t\tbreak\nif index is not None:\n\tnextpu = pus.list[index+1]\nelse:\n\tValueError('\u7f3a\u5931\u4e0b\u4e00\u4e2apu\u5bf9\u8c61')\n\n\n# \u83b7\u5f97before_reg\u548cafter_reg\nbefore_reg = io.imread(self.before_reg)\nafter_reg = io.imread(nextpu.after_reg)\nslices = min(before_reg.shape[0], after_reg.shape[0])\nif before_reg.shape[0] != after_reg.shape[0]:\n\tprint('\u8b66\u544a\uff0c\u524d\u540e\u6bd4\u8f83\u7684\u56fe\u7247\u5c42\u6570\u4e0d\u540c\uff0c\u5c06\u53d6\u8f83\u5c0f\u503c')\n\n\n# \u914d\u51c6\nfrom pystackreg import StackReg\nsr = StackReg(StackReg.RIGID_BODY)\n\n# \u540c\u5c42\u914d\u51c6\ntmats = []\nfor slice in tqdm(range(slices), desc='\u540c\u5c42\u914d\u51c6--\u77e9\u9635\u83b7\u53d6'):\n\tref = before_reg[slice]\n\tmov = after_reg[slice]\n\ttmat = sr.register(ref, mov)\n\ttmat[0, 2] *= scale_factor # \u7f29\u653ex\u5e73\u79fb\n\ttmat[1, 2] *= scale_factor # \u7f29\u653ey\u5e73\u79fb\n\ttmats.append(tmat)\n\n# \u9010\u5c42\u914d\u51c6\ntmats2 = []\nfor slice in tqdm(range(slices), desc='\u9010\u5c42\u914d\u51c6--\u77e9\u9635\u83b7\u53d6'):\n\tmov = before_reg[slice]\n\tif slice == 0:\n\t\tref = before_reg[slice]\n\t\ttmat = np.eye(3)\n\telse:\n\t\tref = before_reg[slice-1]\n\t\ttmat = sr.register(ref, mov)\n\t\tbefore_reg[slice] = sr.transform(mov, tmat=tmat)\n\ttmat[0, 2] *= scale_factor # \u7f29\u653ex\u5e73\u79fb\n\ttmat[1, 2] *= scale_factor # \u7f29\u653ey\u5e73\u79fb\n\ttmats2.append(tmat)\n\n\n# \u5bf9\u56fe\u50cf\u8fdb\u884c\u4eff\u5c04\u53d8\u6362\n\n## BEFORE\nbefore= io.imread(self.image)[self.startindex:self.startindex+slices]\nbefore_regged_stack = []\nfor idx, tmat in enumerate(tqdm(tmats2, desc = '\u9010\u5c42\u914d\u51c6--\u4eff\u5c04\u53d8\u6362')):\n\tif before.ndim == 4:\n\t\ttransformed_channels = []\n\t\tfor channel in range(before.shape[1]):\n\t\t\ttransformed_channel = np.clip(sr.transform(before[idx, channel], tmat=tmat),0,255)\n\t\t\ttransformed_channels.append(transformed_channel)\n\t\tbefore_regged_stack.append(np.stack(transformed_channels))\n\telif before.ndim == 3:\n\t\tbefore_regged_stack.append(np.clip(sr.transform(before[idx], tmat=tmat),0,255))\n\telse:\n\t\traise ValueError(f'\u4e0d\u652f\u6301\u7684\u56fe\u50cf\u7ef4\u5ea6')\nbefore_regged = np.stack(before_regged_stack).astype(np.uint8)\npath_before_regged = self.root + '/before_regged.tif'\nio.imsave(path_before_regged, before_regged)\nself.before_regged = path_before_regged\n\n\n## AFTER\nafter = io.imread(nextpu.image)[nextpu.startindex:nextpu.startindex+slices]\nafter_regged_stack = []\nfor idx, tmat in enumerate(tqdm(tmats, desc='\u540c\u5c42\u914d\u51c6--\u4eff\u5c04\u53d8\u6362')):\n\ttmat_combined = np.dot(tmats2[idx], tmat)\n\tif after.ndim == 4:\n\t\ttransformed_channels = []\n\t\tfor channel in range(after.shape[1]):\n\t\t\ttransformed_channel = np.clip(sr.transform(after[idx, channel], tmat=tmat_combined),0,255)\n\t\t\ttransformed_channels.append(transformed_channel)\n\t\tafter_regged_stack.append(np.stack(transformed_channels))\n\telif after.ndim == 3:\n\t\tafter_regged_stack.append(np.clip(sr.transform(after[idx], tmat=tmat_combined),0,255))\n\telse:\n\t\traise ValueError(f'\u4e0d\u652f\u6301\u7684\u56fe\u50cf\u7ef4\u5ea6')\nafter_regged = np.stack(after_regged_stack).astype(np.uint8)\npath_after_regged = nextpu.root + '/after_regged.tif'\nio.imsave(path_after_regged, after_regged)\nnextpu.after_regged = path_after_regged\n\n\nmacro =f'''\nopen(\"{{path_before_regged}}\");\nrename(\"composite-before\");\nrun(\"Stack to Hyperstack...\", \"order=xyczt(default) channels={{after.shape[1]}} slices={{slices}} frames=1 display=Color\");\nrun(\"Duplicate...\", \"title=before duplicate channels={{splitchannel}}\");\n\nopen(\"{{nextpu.after_regged}}\");\nrename(\"composite-after\");\nrun(\"Stack to Hyperstack...\", \"order=xyczt(default) channels={{after.shape[1]}} slices={{slices}} frames=1 display=Color\");\nrun(\"Duplicate...\", \"title=after duplicate channels={{splitchannel}}\");\n\nrun(\"Synchronize Windows\");\n'''\nij.py.run_macro(macro)\nprint('\u540c\u5c42\u914d\u51c6\u5b8c\u6bd5')"
    },
    "allign_d2d_super": {
        "func_name": "allign_d2d_super",
        "alias": "\u9694\u65e5\u5bf9\u9f50s",
        "type": "Program",
        "code_template": "# \u5bfc\u5165\u5305\nimport matplotlib.pyplot as plt\nfrom skimage import io\nfrom tqdm import tqdm\n\n\n# \u83b7\u53d6ij\u5bf9\u8c61\nij = self.ij\n\n# \u53d6\u5f97nextpu\npus = self.pus\nindex = None\nfor i , pu in enumerate(pus.list):\n\tif pu.name == self.name:\n\t\tindex = i\n\t\tbreak\nif index is not None:\n\tnextpu = pus.list[index+1]\nelse:\n\traise ValueError('\u7f3a\u5931\u4e0b\u4e00\u4e2apu\u5bf9\u8c61')\n\n\n# \u53c2\u6570\u83b7\u53d6\nchannel = {channel:\u9009\u62e9\u914d\u51c6\u7684\u53c2\u8003\u901a\u9053(begin from 1)} - 1\nlength = {length:\u622a\u53d6\u5c42\u6570}\nscale_factor = {scale_factor:\u7f29\u653e\u7cfb\u6570(\u63a8\u8350\u4e3a2)}\n\n\n# \u8bfb\u53d6\u56fe\u7247\nbefore = io.imread(self.image)\nafter = io.imread(nextpu.image)\n\n\n# \u59d1\u4e14\u5148\u7f29\u653e\u539f\u56fe\n_, _, bx, by= before.shape\n_, _, ax, ay = after.shape\nx = min(ax, bx) // scale_factor\ny = min(ay, by) // scale_factor\ndef resize_image(image, x, y):\n\timport numpy as np\n\timport cv2\n\ttarget_size = (x, y)\n\tndim = image.ndim\n\tif ndim == 2:\n\t\t# 2D image (x, y)\n\t\treturn cv2.resize(image, target_size, interpolation=cv2.INTER_AREA)\n\telif ndim == 3:\n\t\t# 3D image (slices, x, y)\n\t\treturn np.array([cv2.resize(slice, target_size, interpolation=cv2.INTER_AREA) for slice in image])\n\telif ndim == 4:\n\t\t# 4D image (slices, channels, x, y)\n\t\treturn np.array([[cv2.resize(channel, target_size, interpolation=cv2.INTER_AREA) for channel in slice] for slice in image])\n\t# \u6682\u4e0d\u8003\u86515D\n\t# elif ndim == 5:\n\t\t# 5D image (time, slices, channels, x, y)\n\t\t# return np.array([[[cv2.resize(channel, target_size, interpolation=cv2.INTER_AREA) for channel in slice] for slice in time_point] for time_point in image])\n\telse: raise ValueError(f\"Unsupported image dimension: {{ndim}}\")\nprint('\u7f29\u653e\u56fe\u50cf\u5230(',x,',',y,')\uff0c\u8bf7\u7b49\u5f85\u2026\u2026')\nbefore = resize_image(before, x, y)\nafter = resize_image(after,x, y)\nprint('\u7f29\u653e\u5b8c\u6210')\n\n\n# \u8bfb\u53d6\u56fe\u7247\u4e2d\u8981\u5904\u7406\u7684\u5e27\nbefore_align = before[:,channel,:,:]\nafter_align = after[:,channel,:,:]\n\n\n# \u8ba1\u7b97\u622a\u53d6\u53c2\u6570\nslices = min(before_align.shape[0], after_align.shape[0]) # \u9632\u6b62\u5c42\u6570\u4e0d\u4e00\nprint('\u5c42\u6570\uff1a',slices)\nstart_ref = (slices - length) // 2\ntry:\n\tstart_ref_index = getattr(self, 'startindex')\n\tprint(f'\u53c2\u8003\u56fe\u5df2\u6709\u8bbe\u7f6e\u7684\u8d77\u59cb\u5e27\u7d22\u5f15{{start_ref_index}}')\nexcept:\n\tstart_ref_index = start_ref - 1\n\tprint(f'\u53c2\u8003\u56fe\u8d77\u59cb\u5e27\u7d22\u5f15\u5c06\u8bbe\u4e3a{{start_ref_index}}')\nuser_defined_index = {start_ref_index:\u53c2\u8003\u56fe\u8d77\u59cb\u5e27\u7d22\u5f15(\u9ed8\u8ba4\u4e3a0)}\nif user_defined_index != 0:\n\tstart_ref_index = user_defined_index\n\tprint('\u53c2\u8003\u56fe\u8d77\u59cb\u5e27\u7d22\u5f15\u6839\u636e\u7528\u6237\u8bbe\u5b9a\u4e3a', start_ref_index)\nprint('\u53c2\u8003\u56fe\u8d77\u59cb\u5e27\u4e3a', start_ref_index+1)\nself.startindex = start_ref_index\n\n\n# \u81ea\u52a8\u5bf9\u9f50\u8d77\u59cb\u5e27\ndef find_best_match(reference_stack, moving_stack, ref_index, AVG_length=2, irange=None, length=length):\n\timport cv2\n\timport numpy as np\n\tfrom tqdm import tqdm\n\t# \u63d0\u53d6\u53c2\u8003\u5e27\u4ee5\u53ca\u5b83\u7684\u524d\u540e AVG_length \u5e27\n\tstart_ref = ref_index + 1\n\treference_frames = reference_stack[ref_index - AVG_length: ref_index + 1 + AVG_length, :, :]  # \u5171 2 * AVG_length + 1 \u5e27\n\tbest_match_frame = None\n\tbest_score = -1\n\tbest_index = -1\n\n\t# \u5faa\u73af\u904d\u5386 moving_stack \u7684\u6bcf\u4e00\u5e27\uff0c\u786e\u4fdd\u8fb9\u7f18\u5e27\u4e0d\u4f1a\u8d85\u51fa\u8303\u56f4\n\tif irange is None:\n\t\tirange = range(AVG_length, 2*((moving_stack.shape[0] - length)//2)-AVG_length)\n\tfor i in tqdm(irange,desc='\u81ea\u52a8\u5bf9\u9f50\u8d77\u59cb\u5e27'):\n\t\t# \u53d6\u51fa\u5f53\u524d\u5e27\u53ca\u5176\u524d\u540e AVG_length \u5e27\n\t\tmoving_frames = moving_stack[i - AVG_length:i + AVG_length + 1, :, :]  # \u5171 2 * AVG_length + 1 \u5e27\n\n\t\t# \u5bf9\u9010\u5e27\u8fdb\u884c\u5339\u914d\n\t\tmatch_scores = []\n\t\tfor ref_frame, mov_frame in zip(reference_frames, moving_frames):\n\t\t\tres = cv2.matchTemplate(mov_frame, ref_frame, cv2.TM_CCOEFF_NORMED)\n\t\t\tmin_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)\n\t\t\tmatch_scores.append(max_val)\n\t\t\t\n\t\t\tmean_val = np.mean(match_scores)\n\t\t\tif mean_val > best_score:\n\t\t\t\tbest_score = mean_val\n\t\t\t\tbest_index = i\n\tif best_index != -1:\n\t\tprint('\u5bf9\u9f50\u7ed3\u679c:',best_score, f'\u7b2c{{best_index+1}}\u5e27')\n\t\treturn best_index\n\n\nAVG_length = 2\nstart_mov_index = find_best_match(before_align, after_align, start_ref_index, AVG_length = AVG_length, length=length)\nnextpu.startindex = start_mov_index\n\n\n# \u622a\u53d6\u56fe\u50cf\nbefore_reg = before_align[start_ref_index : start_ref_index + length]\nafter_reg = after_align[start_mov_index : start_mov_index + length]\n\n\n# \u4fdd\u5b58\u56fe\u50cf\npath_before_reg = self.root+'/before_reg.tif'\nio.imsave(path_before_reg, before_reg)\nself.before_reg = path_before_reg\n\npath_after_reg =  nextpu.root+'/after_reg.tif'\nio.imsave(path_after_reg, after_reg)\nnextpu.after_reg = path_after_reg\n\n\n# \u5728pyimagej\u91cc\u9884\u89c8\u56fe\u50cf\n# ij.ui().showUI()\n# macro = f'''\n# open(\"{{self.before_reg}}\");\n# open(\"{{nextpu.after_reg}}\");\n# run(\"Synchronize Windows\");\n# '''\n# ij.py.run_macro(macro)\n\n# \u914d\u51c6\u5e76\u663e\u793a\u7ed3\u679c\nself.reg_d2d_super(channel = channel+1, scale_factor=scale_factor)\n\n# \u4eba\u5de5\u4fee\u6b63\noffset = int(input(f'\u662f\u5426\u9700\u8981\u4eba\u5de5\u4fee\u6b63\u504f\u79fb\uff0c\u5bf9\u4e8eafter\u7684\u56fe\u50cf\uff0c\u8d1f\u4e3a\u5411\u524d\uff0c\u6b63\u4e3a\u5411\u540e\uff08\u8303\u56f4\uff1a{{-start_mov_index}}~{{slices-length-start_mov_index}}\uff09\uff1a'))\nif offset == 0:\n\tprint('\u5f88\u597d\uff0c\u65e0\u9700\u4fee\u6b63~')\nelif offset not in range(-start_mov_index,slices-length-start_mov_index+1):\n\tprint('\u8d85\u51fa\u4fee\u6b63\u8303\u56f4\uff0c\u4fee\u6b63\u53d6\u6d88')\nelse:\n\tnextpu.startindex += offset\n\tafter_reg = after_align[start_mov_index + offset : start_mov_index + length + offset]\n\tio.imsave(path_after_reg, after_reg)\n\tmacro = f'''\n\tselectImage(\"before\");\n\tclose();\n\tselectImage(\"after\");\n\tclose();\n\tselectImage(\"composite-before\");\n\tclose();\n\tselectImage(\"composite-after\");\n\tclose();\n\t'''\n\tij.py.run_macro(macro)\n\tself.reg_d2d_super(channel = channel+1, scale_factor=scale_factor)\n\n# \u9010\u5e27\u914d\u51c6\n# \u9996\u5148\u914d\u51c6before\uff0c\u8bb0\u5f55\u53d8\u6362\u77e9\u9635\uff0c\u7136\u540e\u5bf9\u5176\u4f59\u4e09\u4e2a\u90fd\u5904\u7406\n\nmacro =f'''\n// \u5f39\u51fa\u9009\u62e9\u5668\uff0c\u83b7\u53d6\u76ee\u5f55\ndir = \"{{nextpu.root}}/\";\n\nselectImage(\"before\");\nsaveAs(\"Tiff\", dir+\"before\");\nclose();\n\nselectImage(\"composite-before\");\nsaveAs(\"Tiff\", dir+\"composite-before\");\nclose();\n\nselectImage(\"after\");\nsaveAs(\"Tiff\", dir+\"after\");\nclose();\n\nselectImage(\"composite-after\");\nsaveAs(\"Tiff\", dir+\"composite-after\");\nclose();\n\n'''\nij.py.run_macro(macro)\nprint('\u5bf9\u9f50\u548c\u914d\u51c6\u5b8c\u6210')"
    },
    "temp240912": {
        "func_name": "temp240912",
        "alias": "\u793a\u4f8b240912",
        "type": "Program",
        "code_template": "ij = self.ij\nself.allign_d2d_super(channel=2, length=100, scale_factor=4, start_ref_index=0)"
    },
    "test240912": {
        "func_name": "test240912",
        "alias": "reg\u6d4b\u8bd5",
        "type": "test",
        "code_template": "from skimage import io\nfrom tqdm import tqdm\nimport numpy as np\nfrom scipy.ndimage import affine_transform\n\n# \u53c2\u6570\u83b7\u53d6\nscale_factor = {scale_factor:\u7f29\u653e\u7cfb\u6570(\u63a8\u8350\u4e3a2)}\nsplitchannel = {channel:\u9009\u62e9\u5206\u6790\u7684\u901a\u9053(begin from 1)}\n\n# \u83b7\u53d6ij\u5bf9\u8c61\nij = self.ij\n\n# \u83b7\u5f97before_reg\u548cafter_reg\nbefore_reg = io.imread(self.before_reg)\n# before_reg = io.imread(self.image)[:,1,:,:]\n# slices = 100\n# before_reg = before_reg[self.startindex : self.startindex+slices]\nslices = before_reg.shape[0]\n\nfrom pystackreg import StackReg\nsr = StackReg(StackReg.RIGID_BODY)\n\n# \u540c\u65e5\u9010\u5c42\u914d\u51c6\ntmats = []\ntmats2 = []\ntmats3 = []\nfor slice in tqdm(range(slices), desc='\u9010\u5c42\u914d\u51c6--\u77e9\u9635\u83b7\u53d6'):\n\tif slice == 0:\n\t\tref = before_reg[0]\n\telse:\n\t\tref = before_reg[slice-1]\n\n\tmov = before_reg[slice]\n\t# tmat = sr.register(mov, ref)\n\t# matrix_2x2 = tmat[:2, :2]  # \u83b7\u53d6\u65cb\u8f6c/\u7f29\u653e\u90e8\u5206\n\t# offset = tmat[:2, 2]       # \u83b7\u53d6\u5e73\u79fb\u90e8\u5206 (tx, ty)\n\t# before_reg[slice] = affine_transform(before_reg[slice], matrix_2x2, offset=offset)\n\t# tmats3.append(tmat)\n\t# tmat[0, 2] *= scale_factor # \u7f29\u653ex\u5e73\u79fb\n\t# tmat[1, 2] *= scale_factor # \u7f29\u653ey\u5e73\u79fb\n\t# tmats2.append(tmat)\n\ttmat = sr.register(ref, mov)\n\tbefore_reg[slice] = sr.transform(mov, tmat=tmat)\n\ttmat[0, 2] *= scale_factor # \u7f29\u653ex\u5e73\u79fb\n\ttmat[1, 2] *= scale_factor # \u7f29\u653ey\u5e73\u79fb\n\ttmats.append(tmat)\n\nbefore_origin = io.imread(self.image)[:,1,:,:]\nbefore_origin = before_origin[self.startindex : self.startindex+slices]\nfor slice in tqdm(range(slices), desc='\u9010\u5c42\u914d\u51c6--\u4eff\u5c04\u53d8\u6362'):\n\tbefore_origin[slice] = sr.transform(before_origin[slice], tmat=tmats[slice])\n\npath_before_test = self.root + '/before_test.tif'\nio.imsave(path_before_test, before_origin)\nself.before_test = path_before_test\n\n\nmacro =f'''\nopen(\"{{self.before_reg}}\")\nrun(\"Size...\", \"width=1024 height=1024 depth=100 constrain average interpolation=Bilinear\");\nopen(\"{{path_before_test}}\");\nrun(\"Synchronize Windows\");\n'''\nij.py.run_macro(macro)\nprint('\u540c\u5c42\u914d\u51c6\u5b8c\u6bd5')\n\n\t"
    },
    "reg_d2d_super_bak": {
        "func_name": "reg_d2d_super_bak",
        "alias": "\u9694\u65e5\u540c\u5c42\u914d\u51c6s_bak",
        "type": "bak",
        "code_template": "from skimage import io\nfrom tqdm import tqdm\nimport numpy as np\n# \u9700\u8981\u5148\u53d6\u5f97before_reg\u548cafter_reg\n\n\n# \u53c2\u6570\u83b7\u53d6\nscale_factor = {scale_factor:\u7f29\u653e\u7cfb\u6570(\u63a8\u8350\u4e3a2)}\nsplitchannel = {channel:\u9009\u62e9\u5206\u6790\u7684\u901a\u9053(begin from 1)}\n\n# \u83b7\u53d6ij\u5bf9\u8c61\nij = self.ij\n\n\n# \u53d6\u5f97nextpu\npus = self.pus\nindex = None\nfor i , pu in enumerate(pus.list):\n\tif pu.name == self.name:\n\t\tindex = i\n\t\tbreak\nif index is not None:\n\tnextpu = pus.list[index+1]\nelse:\n\tValueError('\u7f3a\u5931\u4e0b\u4e00\u4e2apu\u5bf9\u8c61')\n\n\n# \u83b7\u5f97before_reg\u548cafter_reg\nbefore_reg = io.imread(self.before_reg)\nafter_reg = io.imread(nextpu.after_reg)\nslices = min(before_reg.shape[0], after_reg.shape[0])\nif before_reg.shape[0] != after_reg.shape[0]:\n\tprint('\u8b66\u544a\uff0c\u524d\u540e\u6bd4\u8f83\u7684\u56fe\u7247\u5c42\u6570\u4e0d\u540c\uff0c\u5c06\u53d6\u8f83\u5c0f\u503c')\n\n\n# \u914d\u51c6\nfrom pystackreg import StackReg\nsr = StackReg(StackReg.RIGID_BODY)\n\n# \u540c\u65e5\u9010\u5c42\u914d\u51c6\ntmats = []\nfor slice in tqdm(range(slices), desc='\u540c\u5c42\u914d\u51c6--\u77e9\u9635\u83b7\u53d6'):\n\tref = before_reg[slice]\n\tmov = after_reg[slice]\n\ttmat = sr.register(ref, mov)\n\ttmat[0, 2] *= scale_factor # \u7f29\u653ex\u5e73\u79fb\n\ttmat[1, 2] *= scale_factor # \u7f29\u653ey\u5e73\u79fb\n\ttmats.append(tmat)\n\n# \u540c\u65e5\u9010\u5c42\u914d\u51c6\ntmats2 = []\nfor slice in tqdm(range(slices), desc='\u9010\u5c42\u914d\u51c6--\u77e9\u9635\u83b7\u53d6'):\n\tmov = before_reg[slice]\n\tif slice == 0:\n\t\tref = before_reg[slice]\n\t\ttmat = np.array([[1,0,0],[0,1,0],[0,0,1]])\n\telse:\n\t\tref = before_reg[slice-1]\n\t\ttmat = sr.register(ref, mov)\n\t\tbefore_reg[slice] = sr.transform(mov, tmat=tmat)\n\ttmat[0, 2] *= scale_factor # \u7f29\u653ex\u5e73\u79fb\n\ttmat[1, 2] *= scale_factor # \u7f29\u653ey\u5e73\u79fb\n\ttmats2.append(tmat)\n\n\n# \u5bf9\u56fe\u50cf\u8fdb\u884c\u4eff\u5c04\u53d8\u6362\n\n## BEFORE\nbefore= io.imread(self.image)[self.startindex:self.startindex+slices]\nbefore_regged_stack = []\nfor idx, tmat in enumerate(tqdm(tmats2, desc = '\u9010\u5c42\u914d\u51c6--\u4eff\u5c04\u53d8\u6362')):\n\tif before.ndim == 4:\n\t\ttransformed_channels = []\n\t\tfor channel in range(before.shape[1]):\n\t\t\ttransformed_channel = sr.transform(before[idx, channel], tmat=tmat)\n\t\t\ttransformed_channels.append(transformed_channel)\n\t\tbefore_regged_stack.append(np.stack(transformed_channels))\n\telif before.ndim == 3:\n\t\tbefore_regged_stack.append(sr.transform(before[idx], tmat=tmat))\n\telse:\n\t\traise ValueError(f'\u4e0d\u652f\u6301\u7684\u56fe\u50cf\u7ef4\u5ea6')\nbefore_regged = np.stack(before_regged_stack)\npath_before_regged = self.root + '/before_regged.tif'\nio.imsave(path_before_regged, before_regged)\nself.before_regged = path_before_regged\n\n\n## AFTER\nafter = io.imread(nextpu.image)[nextpu.startindex:nextpu.startindex+slices]\nafter_regged_stack = []\nfor idx, tmat in enumerate(tqdm(tmats, desc='\u540c\u5c42\u914d\u51c6--\u4eff\u5c04\u53d8\u6362')):\n\ttmat_combined = np.dot(tmats2[idx], tmat)\n\tif after.ndim == 4:\n\t\ttransformed_channels = []\n\t\tfor channel in range(after.shape[1]):\n\t\t\ttransformed_channel = sr.transform(after[idx, channel], tmat=tmat_combined)\n\t\t\ttransformed_channels.append(transformed_channel)\n\t\tafter_regged_stack.append(np.stack(transformed_channels))\n\telif after.ndim == 3:\n\t\tafter_regged_stack.append(sr.transform(after[idx], tmat=tmat_combined))\n\telse:\n\t\traise ValueError(f'\u4e0d\u652f\u6301\u7684\u56fe\u50cf\u7ef4\u5ea6')\nafter_regged = np.stack(after_regged_stack)\npath_after_regged = nextpu.root + '/after_regged.tif'\nio.imsave(path_after_regged, after_regged)\nnextpu.after_regged = path_after_regged\n\n\nmacro =f'''\nopen(\"{{path_before_regged}}\");\nrename(\"composite-before\");\nrun(\"Stack to Hyperstack...\", \"order=xyczt(default) channels={{after.shape[1]}} slices={{slices}} frames=1 display=Color\");\nrun(\"Duplicate...\", \"title=before duplicate channels={{splitchannel}}\");\n\nopen(\"{{nextpu.after_regged}}\");\nrename(\"composite-after\");\nrun(\"Stack to Hyperstack...\", \"order=xyczt(default) channels={{after.shape[1]}} slices={{slices}} frames=1 display=Color\");\nrun(\"Duplicate...\", \"title=after duplicate channels={{splitchannel}}\");\n\nrun(\"Synchronize Windows\");\n'''\nij.py.run_macro(macro)\nprint('\u540c\u5c42\u914d\u51c6\u5b8c\u6bd5')"
    },
    "open_2p4i": {
        "func_name": "open_2p4i",
        "alias": "\u6253\u5f00\u56db\u56fe",
        "type": "subprogram",
        "code_template": "root = self.root\n# print(root)\n\ncbefore = root + '/composite-before.tif'\ncafter = root + '/composite-after.tif'\nbefore = root + '/before.tif'\nafter = root + '/after.tif'\n\nmacro = f'''\nopen(\"{{cbefore}}\");\nopen(\"{{cafter}}\");\nopen(\"{{after}}\");\nopen(\"{{before}}\");\nrun(\"Synchronize Windows\");\n'''\n\nij = self.ij\nij.ui().showUI()\nij.py.run_macro(macro)"
    },
    "cell_se": {
        "func_name": "cell_se",
        "alias": "\u7ec6\u80de\u59cb\u672b\u7b97\u6cd5",
        "type": "subprogram",
        "code_template": "self.scale = {scale:\u4e00\u4e2a\u5355\u4f4d\u7b49\u4e8e\u591a\u5c11\u50cf\u7d20}\n\n# \u8f93\u5165\u548c\u8f93\u51fa\npiji_input_from_pu = ['scale']\npiji_output_from_macro = ['start_of_cell', 'end_of_cell', 'x_center', 'y_center', 'radius']\n\n# \u5b9a\u4e49\u5b8f\u4e3b\u4f53\nmain_macro = '''\n// \u5728\u8fd9\u91cc\u62f7\u8d1dmacro\nrun(\"Set Scale...\", \"distance=\"+ scale +\" known=1 unit=micron global\");\nrun(\"Set Measurements...\", \"area mean centroid redirect=None decimal=3\");\n\ncurrent_slice = getSliceNumber();\nrun(\"Clear Results\");\nrun(\"Measure\");\narea = getResult(\"Area\", 0);\nx_center = getResult(\"X\", 0);\ny_center = getResult(\"Y\", 0);\nrun(\"Clear Results\");\ntotal_length = nSlices;\nradius = sqrt(area / 3.14);\n\n//  \u4fee\u6b63\u7cfb\u6570\nk = 2;\n\nhalf_length = floor(radius)*k;\nstart_of_range = maxOf(current_slice - 2 * half_length, 1);\nend_of_range = minOf(current_slice + 2 * half_length, total_length);\nrange = \"\"+ start_of_range + \"-\" + end_of_range;\nrun(\"Duplicate...\", \"title=measure_arrange duplicate range=\"+range);\nroi_length = nSlices;\nrun(\"Clear Results\");\nintensity = newArray(roi_length);\nfor (i = 0; i < roi_length; i++) {{{{\n\tStack.setSlice(i+1);\n\trun(\"Measure\");\n\tintensity[i] = getResult(\"Mean\", i);\n}}}}\n\nfunction findMaximaMean(arr) {{{{\n    n = lengthOf(arr);\n    \n    // \u5b58\u50a8\u6781\u5927\u503c\u7684\u7d22\u5f15\u548c\u5bf9\u5e94\u7684\u503c\n    maxima_indices = newArray();\n    maxima_values = newArray();\n    maxima_count = 0;\n\n    // \u904d\u5386\u6570\u7ec4\uff0c\u5bfb\u627e\u6781\u5927\u503c\u70b9\n    for (i = 1; i < n - 1; i++) {{{{  // \u6781\u5927\u503c\u4e0d\u4f1a\u51fa\u73b0\u5728\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        if (arr[i] > arr[i-1] && arr[i] > arr[i+1]) {{{{\n            maxima_indices[maxima_count] = i;\n            maxima_values[maxima_count] = arr[i];\n            maxima_count++;\n        }}}}\n    }}}}\n\n    // \u5982\u679c\u6ca1\u6709\u627e\u5230\u6781\u5927\u503c\u70b9\uff0c\u8fd4\u56de\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c\u548c\u6700\u5927\u503c\u7d22\u5f15\n    if (maxima_count == 0) {{{{\n        max_value = arr[0];\n        max_index = 0;\n        for (i = 1; i < n; i++) {{{{\n            if (arr[i] > max_value) {{{{\n                max_value = arr[i];\n                max_index = i;\n            }}}}\n        }}}}\n        return newArray(max_value, max_index);  // \u8fd4\u56de\u6700\u5927\u503c\u548c\u6700\u5927\u503c\u7684\u7d22\u5f15\n    }}}}\n    \n    // \u5982\u679c\u6709\u4e09\u4e2a\u6216\u66f4\u591a\u7684\u6781\u5927\u503c\u70b9\uff0c\u53ea\u8ba1\u7b97\u6700\u5927\u7684\u4e24\u4e2a\u6781\u5927\u503c\u7684\u503c\n    if (maxima_count >= 3) {{{{\n        // \u627e\u51fa\u6700\u5927\u7684\u4e24\u4e2a\u6781\u5927\u503c\n        first_max = 0;\n        second_max = 0;\n        first_max_index = -1;\n        second_max_index = -1;\n\n        for (i = 0; i < maxima_count; i++) {{{{\n            if (maxima_values[i] > first_max) {{{{\n                second_max = first_max;\n                second_max_index = first_max_index;\n                first_max = maxima_values[i];\n                first_max_index = maxima_indices[i];\n            }}}} else if (maxima_values[i] > second_max) {{{{\n                second_max = maxima_values[i];\n                second_max_index = maxima_indices[i];\n            }}}}\n        }}}}\n\n        // \u8ba1\u7b97\u4e24\u4e2a\u6700\u5927\u503c\u7684\u5747\u503c\u548c\u5b83\u4eec\u7684\u7d22\u5f15\u5747\u503c\n        mean_value = (first_max + second_max) / 2;\n        mean_index = (first_max_index + second_max_index) / 2;\n        return newArray(mean_value, mean_index);  // \u8fd4\u56de\u503c\u7684\u5747\u503c\u548c\u7d22\u5f15\u7684\u5747\u503c\n    }}}}\n    \n    // \u5982\u679c\u6781\u5927\u503c\u70b9\u5c11\u4e8e\u4e09\u4e2a\uff0c\u8ba1\u7b97\u6240\u6709\u6781\u5927\u503c\u7684\u5747\u503c\u548c\u7d22\u5f15\u7684\u5747\u503c\n    sum_values = 0;\n    sum_indices = 0;\n    for (i = 0; i < maxima_count; i++) {{{{\n        sum_values += maxima_values[i];\n        sum_indices += maxima_indices[i];\n    }}}}\n\n    mean_value = sum_values / maxima_count;\n    mean_index = sum_indices / maxima_count;\n    \n    return newArray(mean_value, mean_index);  // \u8fd4\u56de\u6781\u5927\u503c\u7684\u5747\u503c\u548c\u7d22\u5f15\u7684\u5747\u503c\n}}}}\nreturnarr = findMaximaMean(intensity);\nmean_value = returnarr[0];\nmean_index = round(returnarr[1]);\nclose();\n// print(mean_value);\n// print(mean_index);\n\n// \u8bbe\u5b9a decay \u7cfb\u6570\ndecay = 2;\n\n// \u4e2d\u5fc3\u4f4d\u7f6e\ncenter = start_of_range + mean_index;  // \u5c06\u5747\u503c\u7d22\u5f15\u8f6c\u6362\u56de\u5168\u56fe\u7684 slice \u8303\u56f4\nthreshold = mean_value / decay;  // \u9608\u503c\u4e3a mean_value / decay\n\n// \u627e\u5230 start_of_cell (\u4ece\u4e2d\u5fc3\u5f80\u5de6\u627e)\nstart_of_cell = -1;  // \u9ed8\u8ba4\u503c\uff0c\u5982\u679c\u627e\u4e0d\u5230\uff0c\u4fdd\u6301\u4e3a -1\nfor (i = mean_index - 1; i >= 0; i--) {{{{  // \u5411\u5de6\u904d\u5386\n    if (intensity[i] < threshold) {{{{\n        start_of_cell = start_of_range + i;  // \u8f6c\u6362\u56de\u5b9e\u9645 slice \u53f7\n        break;\n    }}}}\n}}}}\n// \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u53d6 start_of_range \u4e3a start_of_cell\nif (start_of_cell == -1) {{{{\n    start_of_cell = start_of_range;\n}}}}\n\n// \u627e\u5230 end_of_cell (\u4ece\u4e2d\u5fc3\u5f80\u53f3\u627e)\nend_of_cell = -1;  // \u9ed8\u8ba4\u503c\uff0c\u5982\u679c\u627e\u4e0d\u5230\uff0c\u4fdd\u6301\u4e3a -1\nfor (i = mean_index + 1; i < roi_length; i++) {{{{  // \u5411\u53f3\u904d\u5386\n    if (intensity[i] < threshold) {{{{\n        end_of_cell = start_of_range + i;  // \u8f6c\u6362\u56de\u5b9e\u9645 slice \u53f7\n        break;\n    }}}}\n}}}}\n// \u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u53d6 end_of_range \u4e3a end_of_cell\nif (end_of_cell == -1) {{{{\n    end_of_cell = end_of_range;\n}}}}\n\n// \u8f93\u51fa\u7ed3\u679c\n//print(\"Start of cell: \" + start_of_cell);\n//print(\"End of cell: \" + end_of_cell);\n//print(\"\"+start_of_cell+\"-\"+end_of_cell);\n'''\n\nimport json\nparabus_path = self.root + '/parabus.txt'\nwith open(parabus_path, 'w') as file:\n\t\tpass\n\n# \u6784\u5efa\u5b8f\u5b57\u7b26\u4e32\ninput_macro = ''\n\nargs = {{}}\ntype_mapping = {{\n    str: 'String',\n    int: 'Number',\n    float: 'Number',\n    bool: 'Boolean'\n}}\n\nfor piji_input in piji_input_from_pu:\n    value = getattr(self, piji_input)  # \u5047\u8bbe self \u662f\u5f53\u524d\u7684\u7c7b\u5b9e\u4f8b\n    python_type = type(value)\n    value_type = type_mapping.get(python_type, 'String')  # \u9ed8\u8ba4\u6620\u5c04\u4e3aString\n    args[piji_input] = value\n    input_macro += f'#@ {{value_type}} {{piji_input}}\\n'\n\nif len(piji_output_from_macro) > 0:\n\toutput_macro = f'parabus_path = \"{{parabus_path}}\";'\n\toutput_macro += '\\n' + 'parabus = \"{{\";'\n\tfor piji_output in piji_output_from_macro:\n\t\toutput_macro += '\\n' + f'parabus += \"\\\\\"{{piji_output}}\\\\\": \\\\\"\"+ {{piji_output}} + \"\\\\\",\";'\n\toutput_macro += '\\n' + 'parabus = substring(parabus, 0, lengthOf(parabus) - 1);'\n\toutput_macro += '\\n' + 'parabus += \"}}\";'\n\toutput_macro += '\\nFile.saveString(parabus, parabus_path);'\nelse:\n\toutput_macro = ''\n\n# \u6267\u884cmacro\nij = self.ij \nmacro = input_macro + main_macro + output_macro\n\nij.py.run_macro(macro, args)\n\nif len(piji_output_from_macro) > 0:\n\tdef convert_string(value): \n\t\ttry: \n\t\t\treturn int(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\ttry: \n\t\t\treturn float(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\tif value.lower() in ['true', 'false']: \n\t\t\treturn value.lower() == 'true' \n\t\treturn value\n\twith open(parabus_path, 'r') as file:\n\t\tparabus = json.load(file)\n\tfor piji_output in piji_output_from_macro:\n\t\tvalue = convert_string(parabus[piji_output])\n\t\tsetattr(self, piji_output, value)\n\n# print(self.start_of_cell, self.end_of_cell)"
    },
    "cell_labels": {
        "func_name": "cell_labels",
        "alias": "\u7ec6\u80de\u6807\u7b7e\u8bb0\u5f55",
        "type": "subprogram",
        "code_template": "parabus_path = self.root + '/parabus_labels.txt'\nif os.path.exists(parabus_path):\n\t# \u5c1d\u8bd5\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\n\ttry:\n\twith open(parabus_path, 'r') as file:\n\t\t\tparabus_content = json.load(file)\n\t\t\tself.labels = parabus_content.get('labels', {})\n\t\tprint('\u6210\u529f\u52a0\u8f7d\u4e86parabus_labels.txt\u4e2d\u7684\u6570\u636e')\n\texcept json.JSONDecodeError:\n\t\t# \u5982\u679c\u6587\u4ef6\u5185\u5bb9\u635f\u574f\u6216\u65e0\u6cd5\u89e3\u6790\n\t\tprint('parabus_labels.txt \u6587\u4ef6\u683c\u5f0f\u9519\u8bef\uff0c\u65e0\u6cd5\u89e3\u6790')\n\t\tself.labels = {{}}\nelse:\n\t# \u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521d\u59cb\u5316\u4e3a\u7a7a\u5b57\u5178\n\tprint('\u672a\u627e\u5230parabus_labels.txt\uff0c\u521d\u59cb\u5316labels\u4e3a\u7a7a\u5b57\u5178')\n\tself.labels = {{}}\n\n# \u9996\u5148\u8981\u6709roi\uff0c\u6211\u4eec\u901a\u8fc7input\u6765\u83b7\u53d6label\nnewlabel = input(\"\u9009\u62e9\u4e00\u4e2a\u7ec6\u80deROI\uff0c\u5e76\u8f93\u5165\u8be5\u7ec6\u80de\u7c7b\u578b:\")\n\n# \u5148\u83b7\u53d6\u8d77\u59cbslice\ntry:\n\tscale = getattr(self, 'scale')\n\tself.cell_se(scale=scale)\nexcept:\n\tself.cell_se()\n\nprint(self.start_of_cell, '-', self.end_of_cell)\n\ntry:\n\tgetattr(self, 'labels')\n\t# print('labels\u5b57\u5178\u5df2\u6709')\nexcept:\n\tself.labels = {{}}\n\t# print('\u65b0\u5efalabels\u5b57\u5178')\n\ncolormap = ['red', 'green', 'blue', 'magenta', 'cyan', 'yellow', 'orange', 'pink', 'black', 'white', 'gray', 'lightgray', 'darkgray']\n\nif newlabel not in self.labels:\n\tprint('\u8f93\u5165\u4e86\u65b0\u7684\u7ec6\u80de\u7c7b\u578b\uff0c\u521d\u59cb\u5316\u8bb0\u5f55\u6570\u636e\u7ed3\u6784')\n\tself.labels[newlabel] = {{}}\n\tself.labels[newlabel]['count'] = 1\n\tself.labels[newlabel]['location'] = []\n\tlocation ={{\n\t\t\"start\" : self.start_of_cell,\n\t\t\"end\" : self.end_of_cell,\n\t\t\"center\": (self.x_center, self.y_center),\n\t\t\"radius\": self.radius\n\t}}\n\tself.labels[newlabel]['location'].append(location)\n\tprint(colormap)\n\twhile(1):\n\t\tlut = input('\u4ece\u4e0a\u9762\u9009\u62e9\u4f2a\u8272:')\n\t\tif lut in colormap:\n\t\t\tbreak\n\t\telse:\n\t\t\tprint('\u6240\u8f93\u5165\u7684\u4f2a\u8272\u4e0d\u5728\u4e0a\u5217')\n\tself.labels[newlabel]['lut'] = lut\n\tcount = self.labels[newlabel]['count']\n\tprint(f'\u8be5\u7ec6\u80de\u5df2\u8bb0\u5f55,\u7c7b\u578b\u3010{{newlabel}}\u3011\u5df2\u6709{{count}}\u4e2a')\nelse:\n\tself.labels[newlabel]['count'] += 1\n\tlocation ={{\n\t\t\"start\" : self.start_of_cell,\n\t\t\"end\" : self.end_of_cell,\n\t\t\"center\": (self.x_center, self.y_center),\n\t\t\"radius\": self.radius\n\t}}\n\tself.labels[newlabel]['location'].append(location)\n\tcount = self.labels[newlabel]['count']\n\tprint(f'\u8be5\u7ec6\u80de\u5df2\u8bb0\u5f55,\u7c7b\u578b\u3010{{newlabel}}\u3011\u5df2\u6709{{count}}\u4e2a')\n\nparabus_content = {{\n\"labels\" : self.labels\n}}\nwith open(parabus_path, 'w') as file:\n\tjson.dump(parabus_content, file, indent=4)"
    },
    "python_parabus_template": {
        "func_name": "python_parabus_template",
        "alias": "Python Parabus Template",
        "type": "Template",
        "code_template": "# \u5199\u5728\u4ee3\u7801\u4e3b\u4f53\u4e4b\u540e\nimport json\nfrom datetime import datetime\n\noutputparas = []\noutput_data = {{}}\n\nfor outputpara in outputparas:\n\t# \u83b7\u53d6\u6bcf\u4e2a outputpara \u7684\u503c\uff08\u5047\u8bbe\u662f\u4e00\u4e2a\u5b57\u5178\u952e\u503c\u5bf9\uff09\n\tvalue = getattr(self, outputpara, None)  # \u4ece self \u5bf9\u8c61\u4e2d\u83b7\u53d6\u5c5e\u6027\u503c\n\tif value is not None:\n\t\t# \u5c06\u952e\u503c\u5bf9\u6dfb\u52a0\u5230 output_data \u5b57\u5178\u4e2d\n\t\toutput_data[outputpara] = value\n\nif output_data:\n\t# \u5c06 output_data \u5e8f\u5217\u5316\u4e3a JSON \u683c\u5f0f\u7684\u5b57\u7b26\u4e32\n\tparabus = json.dumps(output_data)\n\n\ttimestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')\n\tparabus_path = self.root + f'/parabus{{timestamp}}.txt'\n\n\t# \u5199\u5165\u6587\u4ef6\n\twith open(parabus_path, 'w') as file:\n\t\tfile.write(parabus)\n\telse:\n\t\tparabus = ''"
    },
    "cell_labels_clear": {
        "func_name": "cell_labels_clear",
        "alias": "\u7ec6\u80de\u6807\u7b7e\u91cd\u7f6e",
        "type": "subprogram",
        "code_template": "self.labels = {{}}"
    },
    "close_imagej_gui": {
        "func_name": "close_imagej_gui",
        "alias": "\u9690\u85cfimagej GUI",
        "type": "dev",
        "code_template": "ij = self.ij\nij.ui().dispose()"
    },
    "draw_labels_overlay": {
        "func_name": "draw_labels_overlay",
        "alias": "\u5728\u5f53\u524d\u7a97\u53e3\u7ed8\u5236label\u7684overlay",
        "type": "Image",
        "code_template": "self.remove_overlay()\nfor key in self.labels.keys():\n\tlabel = self.labels[key]\n\tlut = label['lut']\n\t# print(lut)\n\tlocation = label['location']\n\tfor loc in location:\n\t\tstart = loc['start']\n\t\tend = loc['end']\n\t\tx_center, y_center = loc['center']\n\t\tradius = loc['radius']\n\t\tmacro = f'''\n\t\t// \u5904\u7406\u5f53\u524d\u7a97\u53e3\n\t\tcurrent_slice = getSliceNumber();\n\t\tgetPixelSize(unit, pixelWidth, pixelHeight);\n\t\tscale = 1 / pixelWidth;\n\t\tfor (s = {{start}}; s <= {{end}}; s++){{{{\n\t\t\tStack.setSlice(s);\n\t\t\trun(\"Colors...\", \"selection={{lut}}\");\n\t\t\tsetLineWidth(3);\n\t\t\tmakeOval(scale*({{x_center}} - {{radius}}), scale*({{y_center}} - {{radius}}), scale*2*{{radius}}, scale*2*{{radius}});\n\t\t\trun(\"Add Selection...\");\n\t\t}}}}\n\t\tStack.setSlice(current_slice);\n\t\t'''\n\t\tself.ij.py.run_macro(macro)"
    },
    "remove_overlay": {
        "func_name": "remove_overlay",
        "alias": "\u6e05\u9664overlay",
        "type": "Image",
        "code_template": "# \u8f93\u5165\u548c\u8f93\u51fa\npiji_input_from_pu = []\npiji_output_from_macro = []\n\n# \u5b9a\u4e49\u5b8f\u4e3b\u4f53\nmain_macro = '''\n// \u5728\u8fd9\u91cc\u62f7\u8d1dmacro\nrun(\"Remove Overlay\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'''\n\nimport json\nfrom datetime import datetime\nif len(piji_output_from_macro) > 0:\n\t# \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u5e76\u683c\u5f0f\u5316\u4e3a\u5b57\u7b26\u4e32\n\ttimestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')\n\n\tparabus_path = self.root + f'/parabus{{timestamp}}.txt'\n\twith open(parabus_path, 'a') as file:\n\t\t\tpass\n\n# \u6784\u5efa\u5b8f\u5b57\u7b26\u4e32\ninput_macro = ''\n\nargs = {{}}\ntype_mapping = {{\n    str: 'String',\n    int: 'Number',\n    float: 'Number',\n    bool: 'Boolean'\n}}\n\nfor piji_input in piji_input_from_pu:\n    value = getattr(self, piji_input)  # \u5047\u8bbe self \u662f\u5f53\u524d\u7684\u7c7b\u5b9e\u4f8b\n    python_type = type(value)\n    value_type = type_mapping.get(python_type, 'String')  # \u9ed8\u8ba4\u6620\u5c04\u4e3aString\n    args[piji_input] = value\n    input_macro += f'#@ {{value_type}} {{piji_input}}\\n'\n\nif len(piji_output_from_macro) > 0:\n\toutput_macro = f'parabus_path = \"{{parabus_path}}\";'\n\toutput_macro += '\\n' + 'parabus = \"{{\";'\n\tfor piji_output in piji_output_from_macro:\n\t\toutput_macro += '\\n' + f'parabus += \"\\\\\"{{piji_output}}\\\\\": \\\\\"\"+ {{piji_output}} + \"\\\\\",\";'\n\toutput_macro += '\\n' + 'parabus = substring(parabus, 0, lengthOf(parabus) - 1);'\n\toutput_macro += '\\n' + 'parabus += \"}}\";'\n\toutput_macro += '\\nFile.saveString(parabus, parabus_path);'\nelse:\n\toutput_macro = ''\n\n# \u6267\u884cmacro\nij = self.ij \nmacro = input_macro + main_macro + output_macro\n\nij.py.run_macro(macro, args)\n\nif len(piji_output_from_macro) > 0:\n\tdef convert_string(value): \n\t\ttry: \n\t\t\treturn int(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\ttry: \n\t\t\treturn float(value) \n\t\texcept ValueError: \n\t\t\tpass \n\t\tif value.lower() in ['true', 'false']: \n\t\t\treturn value.lower() == 'true' \n\t\treturn value\n\twith open(parabus_path, 'r') as file:\n\t\tparabus = json.load(file)\n\tfor piji_output in piji_output_from_macro:\n\t\tvalue = convert_string(parabus[piji_output])\n\t\tsetattr(self, piji_output, value)"
    }
}